{"version":3,"sources":["components/earth/wwwx/layer/starfield/SunPosition.js","components/earth/wwwx/layer/starfield/Celestial.js","components/earth/wwwx/layer/starfield/StarFieldProgram.js","components/earth/wwwx/layer/starfield/StarFieldLayer.js","components/earth/wwwx/shapes/TexturedSurfaceShape.js","components/earth/wwwx/shapes/TexturedSurfacePolygon.js","components/earth/useEww.js","components/earth/Earth.js","components/datemanager/components/datelabel/DateLabel.js","components/datemanager/components/datecontroller/DateController.js","components/datemanager/components/datecontroller/useClock.js","components/datemanager/components/dateselector/DateSelectorScale.js","components/datemanager/components/dateselector/DateSelector.js","components/datemanager/DateManager.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Angle","WorldWind","ArgumentError","Logger","SunPosition","getAsGeographicLocation","date","Date","logMessage","LEVEL_SEVERE","celestialLocation","this","getAsCelestialLocation","celestialToGeographic","numDays","computeJulianDate","meanLongitude","normalizeAngle360","meanAnomaly","DEGREES_TO_RADIANS","eclipticLongitude","Math","sin","eclipticLongitudeRad","obliquityOfTheEcliptic","declination","asin","RADIANS_TO_DEGREES","rightAscension","atan","cos","tan","GMST","GHA","longitude","normalizedDegreesLongitude","latitude","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","dayFraction","getUTCHours","getUTCMinutes","getUTCSeconds","A","trunc","B","degrees","angle","Celestial","SUN","MERCURY","VENUS","MARS","JUPITER","SATURN","URANUS","NEPTUNE","getCelestialLocation","id","orbitalElements","d","computeSun","computeMercury","computeVenus","computeMars","computeJupiter","computeSaturn","computeUranus","computeNeptune","computePosition","N","i","w","a","e","M","_ref","E","aa","E1","abs","xv","yv","sqrt","v","atan2","r","xh","yh","zh","lon_corr","lonecl","latecl","_this$getLonSun","getLonSun","lonsun","rsun","xg","yg","zg","ecl","xe","ye","ze","ra","dec","_ref2","GpuProgram","Matrix","Color","StarFieldProgram","gl","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","FRAG_MODE_MIX_COLOR","FRAG_MODE_TEXTURE","FRAG_MODE_COLOR","vertexPointLocation","attributeLocation","mvpMatrixLocation","uniformLocation","numDaysLocation","magnitudeRangeLocation","textureUnitLocation","fragModeLocation","colorLocation","localState","mvpMatrix","magnitudeRange","textureUnit","fragMode","color","matrix","forceLoad","fromIdentity","equals","loadUniformMatrix","copy","uniform1f","minMag","maxMag","uniform2f","unit","uniform1i","TEXTURE0","mode","loadUniformColor","key","Layer","REDRAW_EVENT_TYPE","StarFieldLayer","starDataSource","pickEnabled","sunSize","showSun","_starDataSource","configuration","baseUrl","_sunImageSource","_matrix","_starsPositionsVboCacheKey","_numStars","_starData","_minMagnitude","Number","MAX_VALUE","_maxMagnitude","MIN_VALUE","_loadStarted","_minScale","_scale","MAX_SAFE_INTEGER","pow","_sunPositionsCacheKey","_sunBufferView","Float32Array","_MAX_GL_POINT_SIZE","showPlanets","planets","url","size","jupiterSize","_planetsBufferView","_cacheKeys","sunPosition","planetPositions","starPositions","dc","globe","is2D","haveResources","beginRendering","doDraw","endRendering","loadResources","sunTexture","gpuResourceCache","resourceForKey","planetTextures","every","planet","currentGlContext","fetchStarData","retrieveTexture","forEach","findAndBindProgram","enableVertexAttribArray","depthMask","loadCommonUniforms","renderStars","renderSun","renderPlanets","program","currentProgram","mvp","modelviewProjection","navigatorState","multiplyByScale","loadModelviewProjection","julianDate","time","loadNumDays","generateCacheKey","vboId","bindBuffer","ARRAY_BUFFER","createBuffer","positions","createStarsGeometry","putResource","length","bufferData","STATIC_DRAW","frameStatistics","incrementVboLoadCount","vertexAttribPointer","FLOAT","loadMagnitudeRange","loadFragMode","drawArrays","POINTS","_this2","getParameter","ALIASED_POINT_SIZE_RANGE","log","LEVEL_WARNING","_Celestial$getCelesti","min","_planetsPositionsVboCacheKey","bufferSubData","DYNAMIC_DRAW","textureSrc","bind","sunCelestialLocation","disableVertexAttribArray","self","xhr","XMLHttpRequest","onload","status","JSON","parse","response","sendRedrawRequest","toString","statusText","onerror","ontimeout","open","send","indexes","parseStarsMetadata","metadata","raIndex","Error","decIndex","magIndex","data","len","starInfo","magnitude","pointSize","push","max","floor","starMetaInfo","name","document","createEvent","initEvent","window","dispatchEvent","value","invalidateStarData","PickedObject","SurfacePolygon","SurfaceShape","useEww","clon","clat","alt","starfield","atmosphere","names","eww","useRef","_useState","useState","_useState2","slicedToArray","setProjection","_useState3","_useState4","_useState5","_useState6","geojsonlayers","setGeojsonlayers","_useState7","_useState8","_useState9","altitude","aoi","pickedItems","_useState10","ewwstate","setEwwState","addQuicklookWMS","renderable","console","computeSectors","current","drawContext","Sector","FULL_SPHERE","wmsConfigQL","service","layerNames","title","numLevels","format","sector","levelZeroDelta","Location","qllayer","WmsLayer","userProperties","addLayer","redraw","layers","getLayerByName","displayName","enableRenderables","_x","_enableRenderables","apply","arguments","asyncToGenerator","regenerator_default","mark","_callee","j","renderableStartDate","renderableStopDate","wrap","_context","prev","next","includes","renderables","earthObservation","acquisitionInformation","acquisitionParameter","acquisitionStartTime","getTime","acquisitionStopTime","enabled","timeOffset","stop","setGlobeStates","lo","navigator","lookAtLocation","la","al","range","vp","bl","tr","view","viewport","polygon","pickTerrain","canvasCoordinates","x","y","height","terrainObject","position","round","err","width","getViewPolygon","objectSpread","viewpolygon","handleClick","recognizer","clientX","clientY","pickList","pick","removeLayer","highlighted","objects","userObject","handleDoubleClick","point","useEffect","WorldWindow","redrawCallbacks","BasicWorldWindowController","prototype","applyLimits","WWMath","clamp","clickRecognizer","ClickRecognizer","numberOfClicks","doubleClickRecognizer","recognizeSimultaneouslyWith","maxClickInterval","tapRecognizer","TapRecognizer","numberOfTaps","doubleTapRecognizer","maxTapInterval","wmsConfigBg","wmsConfigNames","slice","starFieldLayer","atmosphereLayer","AtmosphereLayer","quicklookLayer","RenderableLayer","layer","l","setTimeout","goToAnimator","travelTime","goTo","Position","deepPicking","removeGeojson","addGeojson","epoch","renderableLayer","properties","updated","ceil","random","GeoJSONParser","load","concat","toConsumableArray","geometry","placemarkAttributes","PlacemarkAttributes","imageScale","imageColor","labelAttributes","offset","Offset","OFFSET_FRACTION","isPointType","isMultiPointType","attributes","isLineStringType","isMultiLineStringType","drawOutline","outlineColor","interiorColor","red","green","blue","outlineWidth","isPolygonType","isMultiPolygonType","ShapeAttributes","highlightAttributes","addWMS","toggleStarfield","toggleAtmosphere","setTime","toggleProjection","prevProj","supportedProjections","newProj","indexOf","projection","ProjectionWgs84","ProjectionEquirectangular","ProjectionMercator","ProjectionPolarEquidistant","toggleNames","northUp","wwd","headingIncrement","heading","runOperation","Earth","viewdate","_useEww","useHotkeys","react_default","createElement","style","background","left","DateLabel","highlight","animated","className","dateFormat","toUpperCase","DateController","startdate","onDateChange","_useClock","autoStart","initdate","duration","setDate","playing","setPlaying","step","refreshrate","ldate","intervalRef","timeoutRef","start","setInterval","clearTimeout","clearInterval","toJSON","togglePause","reset","increaseSpeed","decreaseSpeed","forceDate","newdate","useClock","lastTap","setLasttap","onClick","now","DateSelectorScale","zoomfactor","immediate","scale","timescale","setTimescale","scaleText","_start","_zoom","hour","monthcode","lastday","lastmonth","lastyear","lasthour","tics","putyear","putmonth","putday","putevenhour","puthour","offsetHeight","refdate","class","pos","label","map","item","top","_useSpring","useSpring","dater","zoomer","_useSpring2","_useSpring2$","set","useLayoutEffect","to","config","onFrame","web","div","ref","DateSelector","onFinalDateChange","STEPS_UP","STEPS_DOWN","selector","scaledate","setScaledate","lastStartdate","setlLastStartdate","newstart","setNewstart","active","setActive","setZoomfactor","xy","useGesture","onDrag","steparea","zoom","event","first","down","delta","velocity","direction","_ref2$temp","temp","getValue","laststeparea","deltaoffset","Xoffset","parentElement","offsetWidth","pageX","pageY","add","sub","decay","onRest","assign","dateselector_DateSelectorScale","points","DateManager","searching","selectorStartdate","setselectorStartdate","controllerStartdate","setcontrollerStartdate","labeldate","setLabelDate","datecontroller_DateController","datelabel_DateLabel","dateselector_DateSelector","App","setViewdate","isFull","setIsfull","_useFullscreen","useFullscreen","body","isFullscreen","toggleFullscreen","dist_default","onChange","earth_Earth","datemanager_DateManager","Boolean","location","hostname","match","ReactDOM","render","app_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gaAiBIA,EAGAC,IAHAD,MACAE,EAEAD,IAFAC,cACAC,EACAF,IADAE,OA8JWC,EAvJK,CAQhBC,wBAAyB,SAAUC,GAC/B,GAAIA,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,0BAClD,gBAGZ,IAAIC,EAAoBC,KAAKC,uBAAuBN,GACpD,OAAOK,KAAKE,sBAAsBH,EAAmBJ,IASzDM,uBAAwB,SAAUN,GAC9B,GAAIA,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,yBAClD,gBAGZ,IAGIK,EAHaH,KAAKI,kBAAkBT,GAGb,QAEvBU,EAAgBL,KAAKM,kBAAkB,OAAU,SAAYH,GAE7DI,EAAcP,KAAKM,kBAAkB,QAAU,SAAYH,GAAWd,EAAMmB,mBAE5EC,EAAoBJ,EAAgB,MAAQK,KAAKC,IAAIJ,GAAe,IAAOG,KAAKC,IAAI,EAAIJ,GACxFK,EAAuBH,EAAoBpB,EAAMmB,mBAEjDK,GAA0B,OAAS,KAAYV,GAAWd,EAAMmB,mBAEhEM,EAAcJ,KAAKK,KAAKL,KAAKC,IAAIE,GAA0BH,KAAKC,IAAIC,IACpEvB,EAAM2B,mBAENC,EAAiBP,KAAKQ,KAAKR,KAAKS,IAAIN,GAA0BH,KAAKU,IAAIR,IACvEvB,EAAM2B,mBAQV,OALIP,GAAqB,IAAMA,EAAoB,MAC/CQ,GAAkB,KAIf,CACHH,YAAaA,EACbG,eAJJA,EAAiBjB,KAAKM,kBAAkBW,KAgB5Cf,sBAAuB,SAAUH,EAAmBJ,GAChD,IAAKI,EACD,MAAM,IAAIR,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,wBAClD,6BAEZ,GAAIH,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,wBAAyB,gBAGvF,IAGIK,EAHaH,KAAKI,kBAAkBT,GAGb,QAGvB0B,EAAOrB,KAAKM,kBAAkB,aAAe,gBAAkBH,GAG/DmB,EAAMtB,KAAKM,kBAAkBe,EAAOtB,EAAkBkB,gBAEtDM,EAAYlC,EAAMmC,4BAA4BF,GAElD,MAAO,CACHG,SAAU1B,EAAkBe,YAC5BS,UAAWA,IAUnBnB,kBAAmB,SAAUT,GACzB,GAAIA,aAAgBC,QAAS,EACzB,MAAM,IAAIL,EACNC,EAAOK,WAAWL,EAAOM,aAAc,cAAe,oBAAqB,gBAGnF,IAAI4B,EAAO/B,EAAKgC,iBACZC,EAAQjC,EAAKkC,cAAgB,EAC7BC,EAAMnC,EAAKoC,aAKXC,GAJOrC,EAAKsC,cACHtC,EAAKuC,gBAGiB,GAFtBvC,EAAKwC,gBAE+B,MAAQ,GAErDP,GAAS,IACTF,GAAQ,EACRE,GAAS,IAGb,IAAIQ,EAAI1B,KAAK2B,MAAMX,EAAO,KACtBY,EAAI,EAAIF,EAAI1B,KAAK2B,MAAMD,EAAI,GAG/B,OAFW1B,KAAK2B,MAAM,QAAUX,EAAO,OAAShB,KAAK2B,MAAM,SAAWT,EAAQ,IAAME,EAAMQ,EAAI,OAEhFN,GAYlB1B,kBAAmB,SAASiC,GACxB,IAAIC,EAAQD,EAAU,IACtB,OAAOC,GAAS,EAAIA,EAASA,EAAQ,EAAI,IAAMA,EAAQ,IAAMA,ICzKjEnD,EACAC,IADAD,MAyOWoD,EAtOG,CAEdC,IAAK,EACLC,QAAS,EACTC,MAAO,EACPC,KAAM,EACNC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EACRC,QAAS,EAETC,qBAXc,SAWOC,EAAIxD,GACrB,IAAIyD,EAEAC,EADe5D,EAAYW,kBAAkBT,GAC5B,UAGrB,OAAQwD,GACJ,KAAKnD,KAAK0C,IACNU,EAAkBpD,KAAKsD,WAAWD,GAClC,MAEJ,KAAKrD,KAAK2C,QACNS,EAAkBpD,KAAKuD,eAAeF,GACtC,MAEJ,KAAKrD,KAAK4C,MACNQ,EAAkBpD,KAAKwD,aAAaH,GACpC,MAEJ,KAAKrD,KAAK6C,KACNO,EAAkBpD,KAAKyD,YAAYJ,GACnC,MAEJ,KAAKrD,KAAK8C,QACNM,EAAkBpD,KAAK0D,eAAeL,GACtC,MAEJ,KAAKrD,KAAK+C,OACNK,EAAkBpD,KAAK2D,cAAcN,GACrC,MAEJ,KAAKrD,KAAKgD,OACNI,EAAkBpD,KAAK4D,cAAcP,GACrC,MAEJ,KAAKrD,KAAKiD,QACNG,EAAkBpD,KAAK6D,eAAeR,GAI9C,OAAOrD,KAAK8D,gBAAgBT,EAAGD,IAGnCG,eAtDc,SAsDCF,GAQX,MAAO,CAACU,EAPE,QAAU,WAAaV,EAOtBW,EAND,OAAS,KAAUX,EAMfY,EALJ,QAAU,WAAaZ,EAKhBa,EAJP,QAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,SAAW,aAAef,IAKxCG,aAjEc,SAiEDH,GAQT,MAAO,CAACU,EAPE,QAAU,SAAaV,EAOtBW,EAND,OAAS,QAAUX,EAMfY,EALJ,OAAU,WAAaZ,EAKhBa,EAJP,OAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAU,aAAef,IAKvCI,YA5Ec,SA4EFJ,GAQR,MAAO,CAACU,EAPE,QAAU,WAAaV,EAOtBW,EAND,OAAS,QAAUX,EAMfY,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,SAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAU,YAAef,IAKvCK,eAvFc,SAuFCL,GAQX,MAAO,CAACU,EAPE,SAAW,WAAaV,EAOvBW,EAND,MAAS,SAAWX,EAMhBY,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,QAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,OAAU,YAAef,IAKvCM,cAlGc,SAkGAN,GAQV,MAAO,CAACU,EAPE,SAAW,SAAaV,EAOvBW,EAND,OAAS,SAAWX,EAMhBY,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,QAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAW,YAAef,IAKxCO,cA7Gc,SA6GAP,GAQV,MAAO,CAACU,EAPE,QAAU,SAAYV,EAOrBW,EAND,MAAS,OAASX,EAMdY,EALJ,QAAU,SAAYZ,EAKfa,EAJP,SAAW,QAAUb,EAIXc,EAHV,QAAW,QAAUd,EAGRe,EAFb,SAAW,WAAcf,IAKvCQ,eAxHc,SAwHCR,GAQX,MAAO,CAACU,EAPE,SAAW,SAAYV,EAOtBW,EAND,KAAS,QAAUX,EAMfY,EALJ,SAAW,QAAWZ,EAKfa,EAJP,SAAW,SAAWb,EAIZc,EAHV,QAAW,QAAUd,EAGRe,EAFb,SAAW,WAAcf,IAKvCC,WAnIc,SAmIHD,GAQP,MAAO,CAACU,EAPE,EAOCC,EAND,EAMIC,EALJ,SAAW,WAAaZ,EAKjBa,EAJP,EAIUC,EAHV,QAAW,SAAWd,EAGTe,EAFb,QAAW,YAAef,IAKxCS,gBA9Ic,SA8IET,EA9IFgB,GA8IyB,IAAnBN,EAAmBM,EAAnBN,EAAGC,EAAgBK,EAAhBL,EAAGC,EAAaI,EAAbJ,EAAGC,EAAUG,EAAVH,EAAGC,EAAOE,EAAPF,EAAGC,EAAIC,EAAJD,EAC/BL,EAAItE,EAAYa,kBAAkByD,GAAK1E,EAAMmB,mBAC7CwD,EAAIvE,EAAYa,kBAAkB0D,GAAK3E,EAAMmB,mBAC7CyD,EAAIxE,EAAYa,kBAAkB2D,GAAK5E,EAAMmB,mBAI7C,IAAI8D,GAFJF,EAAI3E,EAAYa,kBAAkB8D,GAAK/E,EAAMmB,oBAEjC2D,EAAIzD,KAAKC,IAAIyD,IAAM,EAAMD,EAAIzD,KAAKS,IAAIiD,IAElD,GAAID,GAAK,IACL,IAAK,IAAII,EAAK,EAAGA,EAAK,GAAIA,IAAM,CAC5B,IAAIC,EAAKF,GAAKA,EAAIH,EAAIzD,KAAKC,IAAI2D,GAAKF,IAAM,EAAID,EAAIzD,KAAKS,IAAImD,IAC3D,GAAI5D,KAAK+D,IAAID,EAAKF,GAAK,KAAO,CAC1BA,EAAIE,EACJ,MAEJF,EAAIE,EAIZ,IAAME,EAAKR,GAAKxD,KAAKS,IAAImD,GAAKH,GACxBQ,EAAKT,GAAKxD,KAAKkE,KAAK,EAAMT,EAAIA,GAAKzD,KAAKC,IAAI2D,IAE5CO,EAAInE,KAAKoE,MAAMH,EAAID,GACnBK,EAAIrE,KAAKkE,KAAKF,EAAKA,EAAKC,EAAKA,GAE/BK,EAAKD,GAAKrE,KAAKS,IAAI4C,GAAKrD,KAAKS,IAAI0D,EAAIZ,GAAKvD,KAAKC,IAAIoD,GAAKrD,KAAKC,IAAIkE,EAAIZ,GAAKvD,KAAKS,IAAI6C,IACnFiB,EAAKF,GAAKrE,KAAKC,IAAIoD,GAAKrD,KAAKS,IAAI0D,EAAIZ,GAAKvD,KAAKS,IAAI4C,GAAKrD,KAAKC,IAAIkE,EAAIZ,GAAKvD,KAAKS,IAAI6C,IACnFkB,EAAKH,GAAKrE,KAAKC,IAAIkE,EAAIZ,GAAKvD,KAAKC,IAAIqD,IAGnCmB,EAAW,YAAc,EAA8B9B,GAAKhE,EAAMmB,mBAElE4E,EAAS1E,KAAKoE,MAAMG,EAAID,GAAMG,EAC9BE,EAAS3E,KAAKoE,MAAMI,EAAIxE,KAAKkE,KAAKI,EAAKA,EAAKC,EAAKA,IAOvDD,EAAKD,EAAIrE,KAAKS,IAAIiE,GAAU1E,KAAKS,IAAIkE,GACrCJ,EAAKF,EAAIrE,KAAKC,IAAIyE,GAAU1E,KAAKS,IAAIkE,GACrCH,EAAKH,EAAIrE,KAAKC,IAAI0E,GA3CiB,IAAAC,EA6CdtF,KAAKuF,UAAUlC,EAAGrD,KAAKsD,WAAWD,IAAlDmC,EA7C8BF,EA6C9BE,OAAQC,EA7CsBH,EA6CtBG,KACbD,GAAUnG,EAAM2B,mBAChBwE,EAAS/F,EAAYa,kBAAkBkF,GAAUnG,EAAMmB,mBAEvD,IAGMkF,EAAKV,EAHAS,EAAO/E,KAAKS,IAAIqE,GAIrBG,EAAKV,EAHAQ,EAAO/E,KAAKC,IAAI6E,GAIrBI,EAAKV,EAELW,EAAMpG,EAAYa,kBAAkB,QAAU,SAAW+C,GAAKhE,EAAMmB,mBAEpEsF,EAAKJ,EACLK,EAAKJ,EAAKjF,KAAKS,IAAI0E,GAAOD,EAAKlF,KAAKC,IAAIkF,GACxCG,EAAKL,EAAKjF,KAAKC,IAAIkF,GAAOD,EAAKlF,KAAKS,IAAI0E,GAK9C,MAAO,CAACI,GAHGxG,EAAYa,kBAAkBI,KAAKoE,MAAMiB,EAAID,GAAMzG,EAAM2B,oBAGxDkF,IAFAxF,KAAKoE,MAAMkB,EAAItF,KAAKkE,KAAKkB,EAAKA,EAAKC,EAAKA,IAAO1G,EAAM2B,qBAKrEuE,UAlNc,SAkNJlC,EAlNI8C,GAkNU,IAAVlC,EAAUkC,EAAVlC,EAAGE,EAAOgC,EAAPhC,EAAGC,EAAI+B,EAAJ/B,EAChBH,EAAIxE,EAAYa,kBAAkB2D,GAAK5E,EAAMmB,mBAI7C,IAAM8D,GAFNF,EAAI3E,EAAYa,kBAAkB8D,GAAK/E,EAAMmB,oBAE/B2D,EAAIzD,KAAKC,IAAIyD,IAAM,EAAMD,EAAIzD,KAAKS,IAAIiD,IAE9CM,EAAKhE,KAAKS,IAAImD,GAAKH,EACnBQ,EAAKjE,KAAKkE,KAAK,EAAMT,EAAIA,GAAKzD,KAAKC,IAAI2D,GAO7C,MAAO,CAACkB,OALE9E,KAAKoE,MAAMH,EAAID,GAGNT,EAEHwB,KAJH/E,KAAKkE,KAAKF,EAAKA,EAAKC,EAAKA,MC7N1CpF,EAKAD,IALAC,cACA6G,EAIA9G,IAJA8G,WACA5G,EAGAF,IAHAE,OACA6G,EAEA/G,IAFA+G,OACAC,EACAhH,IADAgH,MAmBEC,cACF,SAAAA,EAAYC,GAAI,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1G,KAAAuG,IACZE,EAAAC,OAAAE,EAAA,EAAAF,CAAA1G,KAAA0G,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAA9G,KAAMwG,EAAI,wmCAsCD,ufAsBA,CAAC,kBAELO,oBAAsB,EAC3BN,EAAKO,kBAAoB,EACzBP,EAAKQ,gBAAkB,EAOvBR,EAAKS,oBAAsBT,EAAKU,kBAAkBX,EAAI,eAOtDC,EAAKW,kBAAoBX,EAAKY,gBAAgBb,EAAI,aAOlDC,EAAKa,gBAAkBb,EAAKY,gBAAgBb,EAAI,WAOhDC,EAAKc,uBAAyBd,EAAKY,gBAAgBb,EAAI,kBAOvDC,EAAKe,oBAAsBf,EAAKY,gBAAgBb,EAAI,kBAOpDC,EAAKgB,iBAAmBhB,EAAKY,gBAAgBb,EAAI,YAEjDC,EAAKiB,cAAgBjB,EAAKY,gBAAgBb,EAAI,SAE9CC,EAAKkB,WAAa,CACdC,UAAW,KACXzH,QAAS,KACT0H,eAAgB,KAChBC,YAAa,KACbC,SAAU,KACVC,MAAO,MArHCvB,uFAgIQD,EAAIyB,GACxB,IAAKA,EACD,MAAM,IAAI1I,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,0BAA2B,kBAG9F,IAAIoI,GAAY,EACkB,OAA9BlI,KAAK2H,WAAWC,YAChBM,GAAY,EACZlI,KAAK2H,WAAWC,UAAYvB,EAAO8B,iBAGnCD,GAAclI,KAAK2H,WAAWC,UAAUQ,OAAOH,KAC/CjI,KAAKqI,kBAAkB7B,EAAIyB,EAAQjI,KAAKoH,mBACxCpH,KAAK2H,WAAWC,UAAUU,KAAKL,wCAY3BzB,EAAIrG,GACZ,GAAe,MAAXA,EACA,MAAM,IAAIZ,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,cAAe,mBAE9EE,KAAK2H,WAAWxH,UAAYA,IAC5BqG,EAAG+B,UAAUvI,KAAKsH,gBAAiBnH,GACnCH,KAAK2H,WAAWxH,QAAUA,8CAYfqG,EAAIgC,EAAQC,GAC3B,GAAc,MAAVD,EACA,MAAM,IAAIjJ,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,eAAgB,kBAEnF,GAAc,MAAV2I,EACA,MAAM,IAAIlJ,EACNC,EAAOK,WAAWL,EAAOM,aAAc,mBAAoB,eAAgB,kBAEnF,IAAIoI,GAAY,EACuB,OAAnClI,KAAK2H,WAAWE,iBAChBK,GAAY,EACZlI,KAAK2H,WAAWE,eAAiB,CAACW,EAAQC,KAG1CP,GAAalI,KAAK2H,WAAWE,eAAe,KAAOW,GAAUxI,KAAK2H,WAAWE,eAAe,KAAOY,KACnGjC,EAAGkC,UAAU1I,KAAKuH,uBAAwBiB,EAAQC,GAClDzI,KAAK2H,WAAWE,eAAe,GAAKW,EACpCxI,KAAK2H,WAAWE,eAAe,GAAKY,2CAS5BjC,EAAImC,GACZ3I,KAAK2H,WAAWG,cAAgBa,IAChCnC,EAAGoC,UAAU5I,KAAKwH,oBAAqBmB,EAAOnC,EAAGqC,UACjD7I,KAAK2H,WAAWG,YAAca,wCAIzBnC,EAAIsC,GACT9I,KAAK2H,WAAWI,WAAae,IAC7BtC,EAAGoC,UAAU5I,KAAKyH,iBAAkBqB,GACpC9I,KAAK2H,WAAWI,SAAWe,qCAIzBtC,EAAIwB,GACV,IAAIE,GAAY,EACc,OAA1BlI,KAAK2H,WAAWK,QAChBE,GAAY,EACZlI,KAAK2H,WAAWK,MAAQ,IAAI1B,EAAM,EAAG,EAAG,EAAG,KAG3C4B,GAAclI,KAAK2H,WAAWK,MAAMI,OAAOJ,KAC3ChI,KAAK+I,iBAAiBvC,EAAIwB,EAAOhI,KAAK0H,eACtC1H,KAAK2H,WAAWK,MAAMM,KAAKN,WAhOR5B,GA0O/BG,EAAiByC,IAAM,mCAERzC,QC/PX0C,GAIA3J,IALAgH,MAKAhH,IAJA2J,OACAzJ,EAGAF,IAHAE,OACA6G,EAEA/G,IAFA+G,OACA6C,EACA5J,IADA4J,kBA+hBWC,cAjgBX,SAAAA,EAAYC,GAAgB,IAAA3C,EAAAC,OAAAC,EAAA,EAAAD,CAAA1G,KAAAmJ,IACxB1C,EAAAC,OAAAE,EAAA,EAAAF,CAAA1G,KAAA0G,OAAAG,EAAA,EAAAH,CAAAyC,GAAArC,KAAA9G,KAAM,eAGDqJ,aAAc,EASnB5C,EAAK6C,QAAU,IAOf7C,EAAK8C,SAAU,EAGf9C,EAAK+C,gBAAkBJ,GAAkB9J,IAAUmK,cAAcC,QAAU,oBAC3EjD,EAAKkD,gBAAkBrK,IAAUmK,cAAcC,QAAU,wBAIzDjD,EAAKmD,QAAUvD,EAAO8B,eAItB1B,EAAKoD,2BAA6B,KAGlCpD,EAAKqD,UAAY,EAGjBrD,EAAKsD,UAAY,KAGjBtD,EAAKuD,cAAgBC,OAAOC,UAC5BzD,EAAK0D,cAAgBF,OAAOG,UAI5B3D,EAAK4D,cAAe,EAGpB5D,EAAK6D,UAAY,IACjB7D,EAAK8D,OAASN,OAAOO,kBAAoB9J,KAAK+J,IAAI,EAAG,IAAM,EAI3DhE,EAAKiE,sBAAwB,GAC7BjE,EAAKkE,eAAiB,IAAIC,aAAa,GAGvCnE,EAAKoE,mBAAqB,EAE1BpE,EAAKqE,aAAc,EA5DK,OAgExBrE,EAAKsE,QAAU,CACX,CACI5H,GAAIV,EAAUE,QACdqI,IAAK,uBACLC,KAAMC,EACNjF,GAAI,KACJC,IAAK,MAET,CACI/C,GAAIV,EAAUG,MACdoI,IAAK,qBACLC,KAAMC,EACNjF,GAAI,KACJC,IAAK,MAET,CACI/C,GAAIV,EAAUI,KACdmI,IAAK,oBACLC,KAAMC,EACNjF,GAAI,KACJC,IAAK,MAET,CACI/C,GAAIV,EAAUK,QACdkI,IAAK,uBACLC,KA3BY,GA4BZhF,GAAI,KACJC,IAAK,MAET,CACI/C,GAAIV,EAAUM,OACdiI,IAAK,sBACLC,KAlCY,GAmCZhF,GAAI,KACJC,IAAK,MAET,CACI/C,GAAIV,EAAUO,OACdgI,IAAK,sBACLC,KAAMC,GACNjF,GAAI,KACJC,IAAK,MAET,CACI/C,GAAIV,EAAUQ,QACd+H,IAAK,uBACLC,KAAMC,GACNjF,GAAI,KACJC,IAAK,OAIbO,EAAK0E,mBAAqB,KAE1B1E,EAAK2E,WAAa,CACdC,YAAa,GACbC,gBAAiB,GACjBC,cAAe,IAzHK9E,wEAyJnB+E,GACL,IAAIA,EAAGC,MAAMC,OAIb,GAAK1L,KAAK2L,cAAcH,GAAxB,CAKAxL,KAAK4L,eAAeJ,GACpB,IACIxL,KAAK6L,OAAOL,GADhB,QAIIxL,KAAK8L,aAAaN,SATlBxL,KAAK+L,cAAcP,yCAcbA,GACV,IAAIQ,EAAaR,EAAGS,iBAAiBC,eAAelM,KAAK2J,iBACrDwC,EAAiBnM,KAAK+K,QAAQqB,MAAM,SAAAC,GAEpC,QADgBb,EAAGS,iBAAiBC,eAAeG,EAAOrB,OAG9D,OACsB,MAAlBhL,KAAK+J,WACS,MAAdiC,GACAG,wCAKMX,GACV,IAAIhF,EAAKgF,EAAGc,iBACRL,EAAmBT,EAAGS,iBAErBjM,KAAK+J,WACN/J,KAAKuM,gBAGQN,EAAiBC,eAAelM,KAAK2J,kBAElDsC,EAAiBO,gBAAgBhG,EAAIxG,KAAK2J,iBAG9C3J,KAAK+K,QAAQ0B,QAAQ,SAAAJ,GACDJ,EAAiBC,eAAeG,EAAOrB,MAEnDiB,EAAiBO,gBAAgBhG,EAAI6F,EAAOrB,8CAMzCQ,GACX,IAAIhF,EAAKgF,EAAGc,iBACZd,EAAGkB,mBAAmBnG,GACtBC,EAAGmG,wBAAwB,GAC3BnG,EAAGoG,WAAU,kCAIVpB,GACHxL,KAAK6M,mBAAmBrB,GAExBxL,KAAK8M,YAAYtB,GAEbxL,KAAKuJ,SACLvJ,KAAK+M,UAAUvB,GAGfxL,KAAK8K,aACL9K,KAAKgN,cAAcxB,8CAKRA,GACf,IAAIhF,EAAKgF,EAAGc,iBACRW,EAAUzB,EAAG0B,eAEbC,EAAM3B,EAAG4B,qBAAuB5B,EAAG6B,eAAeD,oBACtDpN,KAAK4J,QAAQtB,KAAK6E,GAClBnN,KAAK4J,QAAQ0D,gBAAgBtN,KAAKuK,OAAQvK,KAAKuK,OAAQvK,KAAKuK,QAE5D0C,EAAQM,wBAAwB/G,EAAIxG,KAAK4J,SAKzC,IAAI4D,EAAa/N,EAAYW,kBAAkBJ,KAAKyN,MAAQ,IAAI7N,MAChEqN,EAAQS,YAAYlH,EAAIgH,EAAa,6CAI7BhC,GACR,IAAIhF,EAAKgF,EAAGc,iBACRL,EAAmBT,EAAGS,iBACtBgB,EAAUzB,EAAG0B,eAEZlN,KAAK6J,6BACN7J,KAAK6J,2BAA6BoC,EAAiB0B,oBAEvD,IAAIC,EAAQ3B,EAAiBC,eAAelM,KAAK6J,4BACjD,GAAK+D,EAQDpH,EAAGqH,WAAWrH,EAAGsH,aAAcF,OARvB,CACRA,EAAQpH,EAAGuH,eACX,IAAIC,EAAYhO,KAAKiO,sBACrBhC,EAAiBiC,YAAYlO,KAAK6J,2BAA4B+D,EAA0B,EAAnBI,EAAUG,QAC/E3H,EAAGqH,WAAWrH,EAAGsH,aAAcF,GAC/BpH,EAAG4H,WAAW5H,EAAGsH,aAAc,IAAIlD,aAAaoD,GAAYxH,EAAG6H,aAKnE7C,EAAG8C,gBAAgBC,sBAAsB,GAEzC/H,EAAGgI,oBAAoB,EAAG,EAAGhI,EAAGiI,OAAO,EAAO,EAAG,GAEjDxB,EAAQyB,mBAAmBlI,EAAIxG,KAAKgK,cAAehK,KAAKmK,eACxD8C,EAAQ0B,aAAanI,EAAIyG,EAAQlG,qBAEjCP,EAAGoI,WAAWpI,EAAGqI,OAAQ,EAAG7O,KAAK8J,iDAIvB0B,GAAI,IAAAsD,EAAA9O,KACVwG,EAAKgF,EAAGc,iBACRW,EAAUzB,EAAG0B,eACbjB,EAAmBT,EAAGS,iBAErBjM,KAAK6K,qBACN7K,KAAK6K,mBAAqBrE,EAAGuI,aAAavI,EAAGwI,0BAA0B,IAEvEhP,KAAKsJ,QAAUtJ,KAAK6K,oBACpBrL,EAAOyP,IAAIzP,EAAO0P,cAAe,4DAC7BlP,KAAK6K,oBAGb7K,KAAK+K,QAAQ0B,QAAQ,SAAAJ,GAAU,IAAA8C,EACT1M,EAAUS,qBAAqBmJ,EAAOlJ,GAAI2L,EAAKrB,MAAQ,IAAI7N,MAAtEqG,EADoBkJ,EACpBlJ,GAAIC,EADgBiJ,EAChBjJ,IACXmG,EAAOpG,GAAKA,EACZoG,EAAOnG,IAAMA,GACdlG,MAEEA,KAAKmL,qBACNnL,KAAKmL,mBAAqB,IAAIP,aAAmC,EAAtB5K,KAAK+K,QAAQoD,SAG5D,IAAK,IAAInK,EAAI,EAAGA,EAAIhE,KAAK+K,QAAQoD,OAAQnK,IAAK,CAC1C,IAAIqI,EAASrM,KAAK+K,QAAQ/G,GAC1BhE,KAAKmL,mBAAuB,EAAJnH,EAAQ,GAAKqI,EAAOnG,IAC5ClG,KAAKmL,mBAAuB,EAAJnH,EAAQ,GAAKqI,EAAOpG,GAC5CjG,KAAKmL,mBAAuB,EAAJnH,EAAQ,GAAKtD,KAAK0O,IAAI/C,EAAOpB,KAAMjL,KAAK6K,oBAChE7K,KAAKmL,mBAAuB,EAAJnH,EAAQ,GAAK,EAGpChE,KAAKqP,+BACNrP,KAAKqP,6BAA+BpD,EAAiB0B,oBAEzD,IAAIC,EAAQ3B,EAAiBC,eAAelM,KAAKqP,8BAC5CzB,GAODpH,EAAGqH,WAAWrH,EAAGsH,aAAcF,GAC/BpH,EAAG8I,cAAc9I,EAAGsH,aAAc,EAAG9N,KAAKmL,sBAP1CyC,EAAQpH,EAAGuH,eACX9B,EAAiBiC,YAAYlO,KAAKqP,6BAA8BzB,EAAwC,EAAjC5N,KAAKmL,mBAAmBgD,QAC/F3H,EAAGqH,WAAWrH,EAAGsH,aAAcF,GAC/BpH,EAAG4H,WAAW5H,EAAGsH,aAAc9N,KAAKmL,mBAAoB3E,EAAG+I,eAM/D/D,EAAG8C,gBAAgBC,sBAAsB,GACzC/H,EAAGgI,oBAAoB,EAAG,EAAGhI,EAAGiI,OAAO,EAAO,EAAG,GAEjDxB,EAAQ0B,aAAanI,EAAIyG,EAAQjG,mBAEjC,IAAK,IAAIhD,EAAI,EAAGA,EAAIhE,KAAK+K,QAAQoD,OAAQnK,IAAK,CAC1C,IAAIwL,EAAaxP,KAAK+K,QAAQ/G,GAAGgH,IACnBQ,EAAGS,iBAAiBC,eAAesD,GACzCC,KAAKjE,GACbhF,EAAGoI,WAAWpI,EAAGqI,OAAQ7K,EAAG,sCAK1BwH,GACN,IAAIhF,EAAKgF,EAAGc,iBACRW,EAAUzB,EAAG0B,eACbjB,EAAmBT,EAAGS,iBAErBjM,KAAK6K,qBACN7K,KAAK6K,mBAAqBrE,EAAGuI,aAAavI,EAAGwI,0BAA0B,IAEvEhP,KAAKsJ,QAAUtJ,KAAK6K,oBACpBrL,EAAOyP,IAAIzP,EAAO0P,cAAe,4DAC7BlP,KAAK6K,oBAGb,IAAI6E,EAAuBjQ,EAAYQ,uBAAuBD,KAAKyN,MAAQ,IAAI7N,MAE/EI,KAAK2K,eAAe,GAAK+E,EAAqB5O,YAC9Cd,KAAK2K,eAAe,GAAK+E,EAAqBzO,eAC9CjB,KAAK2K,eAAe,GAAKjK,KAAK0O,IAAIpP,KAAKsJ,QAAStJ,KAAK6K,oBACrD7K,KAAK2K,eAAe,GAAK,EAEpB3K,KAAK0K,wBACN1K,KAAK0K,sBAAwBuB,EAAiB0B,oBAElD,IAAIC,EAAQ3B,EAAiBC,eAAelM,KAAK0K,uBAC5CkD,GAODpH,EAAGqH,WAAWrH,EAAGsH,aAAcF,GAC/BpH,EAAG8I,cAAc9I,EAAGsH,aAAc,EAAG9N,KAAK2K,kBAP1CiD,EAAQpH,EAAGuH,eACX9B,EAAiBiC,YAAYlO,KAAK0K,sBAAuBkD,EAAoC,EAA7B5N,KAAK2K,eAAewD,QACpF3H,EAAGqH,WAAWrH,EAAGsH,aAAcF,GAC/BpH,EAAG4H,WAAW5H,EAAGsH,aAAc9N,KAAK2K,eAAgBnE,EAAG+I,eAM3D/D,EAAG8C,gBAAgBC,sBAAsB,GACzC/H,EAAGgI,oBAAoB,EAAG,EAAGhI,EAAGiI,OAAO,EAAO,EAAG,GAEjDxB,EAAQ0B,aAAanI,EAAIyG,EAAQjG,mBAEhBwE,EAAGS,iBAAiBC,eAAelM,KAAK2J,iBAC9C8F,KAAKjE,GAEhBhF,EAAGoI,WAAWpI,EAAGqI,OAAQ,EAAG,wCAInBrD,GACT,IAAIhF,EAAKgF,EAAGc,iBACZ9F,EAAGoG,WAAU,GACbpG,EAAGmJ,yBAAyB,2CAK5B,IAAI3P,KAAKqK,aAAT,CAIArK,KAAKqK,cAAe,EACpB,IAAIuF,EAAO5P,KACP6P,EAAM,IAAIC,eAEdD,EAAIE,OAAS,WACT,GAAI/P,KAAKgQ,QAAU,KAAOhQ,KAAKgQ,OAAS,IACpC,IACIJ,EAAK7F,UAAYkG,KAAKC,MAAMlQ,KAAKmQ,UACjCP,EAAKQ,oBAET,MAAOjM,GACH3E,EAAOyP,IAAIzP,EAAOM,aAAc,qDAC5BqE,EAAEkM,iBAIV7Q,EAAOyP,IAAIzP,EAAOM,aAAc,qDAC5BE,KAAKgQ,OAAS,IAAMhQ,KAAKsQ,YAEjCV,EAAKvF,cAAe,GAGxBwF,EAAIU,QAAU,WACV/Q,EAAOyP,IAAIzP,EAAOM,aAAc,4CAChC8P,EAAKvF,cAAe,GAGxBwF,EAAIW,UAAY,WACZhR,EAAOyP,IAAIzP,EAAOM,aAAc,8CAChC8P,EAAKvF,cAAe,GAGxBwF,EAAIY,KAAK,MAAOzQ,KAAKwJ,iBAAiB,GACtCqG,EAAIa,sDAKJ,IAAIC,EAAU3Q,KAAK4Q,mBAAmB5Q,KAAK+J,UAAU8G,UAErD,IAAyB,IAArBF,EAAQG,QACR,MAAM,IAAIC,MACNvR,EAAOK,WAAWL,EAAOM,aAAc,iBAAkB,sBACrD,mCAEZ,IAA0B,IAAtB6Q,EAAQK,SACR,MAAM,IAAID,MACNvR,EAAOK,WAAWL,EAAOM,aAAc,iBAAkB,sBACrD,oCAEZ,IAA0B,IAAtB6Q,EAAQM,SACR,MAAM,IAAIF,MACNvR,EAAOK,WAAWL,EAAOM,aAAc,iBAAkB,sBACrD,qCAGZ,IAAIoR,EAAOlR,KAAK+J,UAAUmH,KACtBlD,EAAY,GAEhBhO,KAAKgK,cAAgBC,OAAOC,UAC5BlK,KAAKmK,cAAgBF,OAAOG,UAE5B,IAAK,IAAIpG,EAAI,EAAGmN,EAAMD,EAAK/C,OAAQnK,EAAImN,EAAKnN,IAAK,CAC7C,IAAIoN,EAAWF,EAAKlN,GAChBlD,EAAcsQ,EAAST,EAAQK,UAC/B/P,EAAiBmQ,EAAST,EAAQG,SAClCO,EAAYD,EAAST,EAAQM,UAC7BK,EAAYD,EAAY,EAAI,EAAI,EACpCrD,EAAUuD,KAAKzQ,EAAaG,EAAgBqQ,EAAWD,GAEvDrR,KAAKgK,cAAgBtJ,KAAK0O,IAAIpP,KAAKgK,cAAeqH,GAClDrR,KAAKmK,cAAgBzJ,KAAK8Q,IAAIxR,KAAKmK,cAAekH,GAItD,OAFArR,KAAK8J,UAAYpJ,KAAK+Q,MAAMzD,EAAUG,OAAS,GAExCH,6CAIQ6C,GAIf,IAHA,IAAIC,GAAW,EACXE,GAAY,EACZC,GAAY,EACPjN,EAAI,EAAGmN,EAAMN,EAAS1C,OAAQnK,EAAImN,EAAKnN,IAAK,CACjD,IAAI0N,EAAeb,EAAS7M,GACF,OAAtB0N,EAAaC,OACbb,EAAU9M,GAEY,QAAtB0N,EAAaC,OACbX,EAAWhN,GAEW,SAAtB0N,EAAaC,OACbV,EAAWjN,GAGnB,MAAO,CACH8M,QAASA,EACTE,SAAUA,EACVC,SAAUA,gDAMdjR,KAAK+J,UAAY,KACjB/J,KAAK6J,2BAA6B,iDAKlC,IAAI1F,EAAIyN,SAASC,YAAY,SAC7B1N,EAAE2N,UAAU5I,GAAmB,GAAM,GACrC6I,OAAOC,cAAc7N,0CA1XrB,OAAOnE,KAAKwJ,8BAGGyI,GACfjS,KAAKwJ,gBAAkByI,EACvBjS,KAAKkS,4DASL,OAAOlS,KAAK2J,8BAGGsI,GACfjS,KAAK2J,gBAAkBsI,SAtJFhJ,GCxCvBkJ,EAAe7S,IAAU6S,aAC3BC,EAAiB9S,IAAU8S,eACZ9S,IAAU+S,aCDN/S,IAAU8S,eCmC1B,SAASE,EAATjO,GAAuE,IAArDlB,EAAqDkB,EAArDlB,GAAIoP,EAAiDlO,EAAjDkO,KAAMC,EAA2CnO,EAA3CmO,KAAMC,EAAqCpO,EAArCoO,IAAKC,EAAgCrO,EAAhCqO,UAAWC,EAAqBtO,EAArBsO,WAAYC,EAASvO,EAATuO,MAI3DC,EAAMC,iBAAO,MAJuDC,EAKtCC,mBAAS,MAL6BC,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GAKvDI,GALuDF,EAAA,GAAAA,EAAA,IAAAG,EAOpDJ,mBAAS,IAP2CK,EAAA3M,OAAAwM,EAAA,EAAAxM,CAAA0M,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAQhCL,mBAAS,KARuBO,EAAA7M,OAAAwM,EAAA,EAAAxM,CAAA4M,EAAA,GAQnEE,EARmED,EAAA,GAQpDE,EARoDF,EAAA,GAAAG,EAS5BV,mBAAS,IATmBW,EAAAjN,OAAAwM,EAAA,EAAAxM,CAAAgN,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAU1CX,mBAAS,CAACvR,SAAU+Q,EAAMjR,UAAWgR,EAAMsB,SAAUpB,EAAKqB,IAAI,GAAIC,YAAa,MAVrCC,EAAAtN,OAAAwM,EAAA,EAAAxM,CAAAkN,EAAA,GAUnEK,EAVmED,EAAA,GAUzDE,EAVyDF,EAAA,GA+L1E,SAASG,EAAgBC,GAErBC,QAAQpF,IAAImF,EAAWE,eAAezB,EAAI0B,QAAQC,cAClDH,QAAQpF,IAAI3P,IAAUmV,OAAOC,aAO7B,IAAIC,EAAc,CACdC,QAAS,2CAGTC,WAAY,4BAGZC,MAAO,YACPC,UAAW,GACXC,OAAQ,YACR/J,KAAM,IACNgK,OAAQb,EAAWE,eAAezB,EAAI0B,QAAQC,aAAa,GAG3DU,eAAgB,IAAI5V,IAAU6V,SAAS,GAAI,KAc3CC,EAAW,IAAI9V,IAAU+V,SAASV,EAAaP,EAAWkB,eAAe3V,MAC7EkT,EAAI0B,QAAQgB,SAASH,GACrBvC,EAAI0B,QAAQiB,SACZnB,QAAQpF,IAAI4D,EAAI0B,QAAQkB,QAG5B,SAASC,EAAe/D,GACpB,IAAK,IAAI3N,EAAI,EAAGA,EAAI6O,EAAI0B,QAAQkB,OAAOtH,OAAQnK,IAE3C,GAAI6O,EAAI0B,QAAQkB,OAAOzR,GAAG2R,cAAgBhE,EAAM,OAAOkB,EAAI0B,QAAQkB,OAAOzR,GAE9E,OAAO,KAhP+D,SAmP3D4R,EAnP2DC,GAAA,OAAAC,EAAAC,MAAA/V,KAAAgW,WAAA,SAAAF,IAAA,OAAAA,EAAApP,OAAAuP,EAAA,EAAAvP,CAAAwP,EAAAhS,EAAAiS,KAmP1E,SAAAC,EAAiC3I,GAAjC,IAAAzJ,EAAAqS,EAAAjC,EAAAkC,EAAAC,EAAA,OAAAL,EAAAhS,EAAAsS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,IADiB,MACR3S,EAAI,EAAGA,EAAI6O,EAAI0B,QAAQkB,OAAOtH,OAAQnK,IAAK,CAChD,GAAI6O,EAAI0B,QAAQkB,OAAOzR,GAAG2R,YAAYiB,SAAS,aAE3C,IAASP,EAAI,EAAGA,EAAIxD,EAAI0B,QAAQkB,OAAOzR,GAAG6S,YAAY1I,OAAQkI,IACtDjC,EAAavB,EAAI0B,QAAQkB,OAAOzR,GAAG6S,YAAYR,GACvC,GAAR5I,GACI6I,EAAuB,IAAI1W,KAAKwU,EAAWkB,eAAewB,iBAAiBC,uBAAuB,GAAGC,qBAAqBC,sBAAuBC,UACjJX,EAAsB,IAAI3W,KAAKwU,EAAWkB,eAAewB,iBAAiBC,uBAAuB,GAAGC,qBAAqBG,qBAAsBD,UACnJ9C,EAAWgD,QAAWd,GAAuB7I,EAAK4J,MAAgBd,GAAsB9I,EAAK4J,MAE7FjD,EAAWgD,SAAU,EAI7BvE,EAAI0B,QAAQkB,OAAOzR,GAAG2R,YAhBlC,wBAAAc,EAAAa,SAAAlB,OAnP0EL,MAAA/V,KAAAgW,WA+W1E,IAAMuB,EAAiB,WAEnB,IAAIC,EAAK3E,EAAI0B,QAAQkD,UAAUC,eAAenW,UAC1CoW,EAAK9E,EAAI0B,QAAQkD,UAAUC,eAAejW,SAC1CmW,EAAK/E,EAAI0B,QAAQkD,UAAUI,MAC3BC,EAAMF,EAAK,IAvTnB,WACI,IAKIG,EASAC,EAdAC,EAAOpF,EAAI0B,QAAQ2D,SAEnBC,EAAU,GAId,KACIJ,EAAMlF,EAAI0B,QAAQ6D,YAAYvF,EAAI0B,QAAQ8D,kBAAkBJ,EAAKK,EAAGL,EAAKM,EAAIN,EAAKO,SAASC,gBAAgBC,UACxGjX,SAAWf,KAAKiY,MAAoB,IAAdZ,EAAGtW,UAAkB,IAC9CsW,EAAGxW,UAAYb,KAAKiY,MAAqB,IAAfZ,EAAGxW,WAAmB,IAEpD,MAAMqX,GAAMb,EAAK,KAIjB,KACIC,EAAKnF,EAAI0B,QAAQ6D,YAAYvF,EAAI0B,QAAQ8D,kBAAkBJ,EAAKK,EAAIL,EAAKY,MAAOZ,EAAKM,IAAIE,gBAAgBC,UACtGjX,SAAWf,KAAKiY,MAAoB,IAAdX,EAAGvW,UAAkB,IAC9CuW,EAAGzW,UAAYb,KAAKiY,MAAqB,IAAfX,EAAGzW,WAAmB,IAEpD,MAAMqX,GAAMZ,EAAK,KAuBjB,OApBS,MAAND,GAAoB,MAANC,EAEXG,EAAU,IAKGJ,EAAGxW,UACFwW,EAAGtW,SACJuW,EAAGzW,UACHyW,EAAGvW,SAGhB0W,EAAU,YACNJ,EAAGxW,UAAY,IAAMwW,EAAGtW,SAAW,IACnCuW,EAAGzW,UAAY,IAAMwW,EAAGtW,SAAW,IACnCuW,EAAGzW,UAAY,IAAMyW,EAAGvW,SAAW,IACnCsW,EAAGxW,UAAY,IAAMyW,EAAGvW,SAAW,IACnCsW,EAAGxW,UAAY,IAAMwW,EAAGtW,SAAW,MAEtC0W,EA2QgBW,GAAiB,GAExC5E,EAAY,SAACD,GAAe,OAAOvN,OAAAqS,EAAA,EAAArS,CAAA,GAAIuN,EAAX,CAAqB1S,UAAUiW,EAAI/V,SAAUkW,EAAI9D,SAAU+D,EAAIoB,YAAalB,OAMtGmB,EAAe,SAACC,GAElB,IAAIZ,EAAIY,EAAWC,QACfZ,EAAIW,EAAWE,QAGfC,EAAWxG,EAAI0B,QAAQ+E,KAAKzG,EAAI0B,QAAQ8D,kBAAkBC,EAAGC,IAEjE,GADAlE,QAAQpF,IAAIoK,GACRA,EAASZ,gBAAb,CAGI5F,EAAI0B,QAAQgF,YAAY7D,EAAe,cAEvC,IAAK,IAAI1R,EAAI,EAAGA,EAAI6O,EAAI0B,QAAQkB,OAAOtH,OAAQnK,IAC3C,GAAI6O,EAAI0B,QAAQkB,OAAOzR,GAAG2R,YAAYiB,SAAS,aAC3C,IAAK,IAAIP,EAAI,EAAGA,EAAIxD,EAAI0B,QAAQkB,OAAOzR,GAAG6S,YAAY1I,OAAQkI,IAAK,CAC9CxD,EAAI0B,QAAQkB,OAAOzR,GAAG6S,YAAYR,GACxCmD,aAAc,EAOrC,IADA,IAAIzF,EAAc,GACT/P,EAAI,EAAGA,EAAIqV,EAASI,QAAQtL,OAAQnK,IACrCqV,EAASI,QAAQzV,GAAG0V,sBAAsBpa,IAAU+S,eACpD0B,EAAYxC,KAAK8H,EAASI,QAAQzV,GAAG0V,YACrCL,EAASI,QAAQzV,GAAG0V,WAAWF,aAAeH,EAASI,QAAQzV,GAAG0V,WAAWF,YAE7ErF,EAAgBkF,EAASI,QAAQzV,GAAG0V,aAG5CrF,QAAQpF,IAAI8E,GACZG,EAAY,SAACD,GAAe,OAAOvN,OAAAqS,EAAA,EAAArS,CAAA,GAAIuN,EAAX,CAAqBF,YAAaA,MAC9DlB,EAAI0B,QAAQiB,cAEZnB,QAAQpF,IAAI,kBAOd0K,EAAqB,SAACT,GACxB7E,QAAQpF,IAAI,gBACZ,IAIIyJ,EAJAJ,EAAIY,EAAWC,QACfZ,EAAIW,EAAWE,QACfC,EAAWxG,EAAI0B,QAAQ+E,KAAKzG,EAAI0B,QAAQ8D,kBAAkBC,EAAGC,IAMjE,GAAIc,EAASZ,gBAAiB,CAI1B,IAAImB,EAAQ,UAHZlB,EAAWW,EAASZ,gBAAgBC,UAGNnX,UAAU,IAAImX,EAASjX,SAAS,IAE9DyS,EAAY,SAACD,GAAe,OAAOvN,OAAAqS,EAAA,EAAArS,CAAA,GAAIuN,EAAX,CAAqBH,IAAK8F,WAGpDvF,QAAQpF,IAAI,iBACZiF,EAAY,SAACD,GAAe,OAAOvN,OAAAqS,EAAA,EAAArS,CAAA,GAAIuN,EAAX,CAAqBH,IAAK,QAiHlE,OAlGE+F,oBAAU,WACNxF,QAAQpF,IAAI,wCAAyCyD,EAAU,IAAIC,GAEnEE,EAAI0B,QAAU,IAAIjV,IAAUwa,YAAY3W,GACxC0P,EAAI0B,QAAQwF,gBAAgBxI,KAAKgG,GAGjCjY,IAAU0a,2BAA2BC,UAAUC,YAAc,WACzDrH,EAAI0B,QAAQkD,UAAUI,MAAQvY,IAAU6a,OAAOC,MAAMvH,EAAI0B,QAAQkD,UAAUI,MAAO,IAAM,MAU5F,IAAIwC,EAAkB,IAAI/a,IAAUgb,gBAAgBzH,EAAI0B,QAAS0E,GACjEoB,EAAgBE,eAAiB,EACjC,IAAIC,EAAwB,IAAIlb,IAAUgb,gBAAgBzH,EAAI0B,QAASoF,GACvEa,EAAsBD,eAAiB,EACvCC,EAAsBC,4BAA4BJ,GAClDG,EAAsBE,iBAAmB,IAEzC,IAAIC,EAAgB,IAAIrb,IAAUsb,cAAc/H,EAAI0B,QAAS0E,GAC7D0B,EAAcE,aAAe,EAC7B,IAAIC,EAAsB,IAAIxb,IAAUsb,cAAc/H,EAAI0B,QAASoF,GACnEmB,EAAoBD,aAAe,EACnCC,EAAoBL,4BAA4BE,GAChDG,EAAoBC,eAAiB,IAKrC,IAAIC,EAAc,CACdpG,QAAS,oCACTC,WAAY,mBACZC,MAAO,mBACPC,UAAW,GACXC,OAAQ,YACR/J,KAAM,IACNgK,OAAQ3V,IAAUmV,OAAOC,YACzBQ,eAAgB,IAAI5V,IAAU6V,SAAS,GAAI,KAG3C8F,EAAiB,CACjBrG,QAAS,gCACTC,WAAY,iBACZC,MAAO,iBACPC,UAAW,GACXC,OAAQ,YACR/J,KAAM,IACNgK,OAAQ3V,IAAUmV,OAAOC,YACzBQ,eAAgB,IAAI5V,IAAU6V,SAAS,GAAI,KAG/Cd,QAAQpF,IAAI3P,IAAUmK,cAAcC,SACpCpK,IAAUmK,cAAcC,QAAUpK,IAAUmK,cAAcC,QAAQwR,MAAM,GAAG,GAC3E7G,QAAQpF,IAAI3P,IAAUmK,cAAcC,SAoBpC,IAhBA,IAAIyR,EAAiB,IAAIhS,EACrBiS,EAAkB,IAAI9b,IAAU+b,gBAAgB,qCAKhDC,EAAiB,IAAIhc,IAAUic,gBAAgB,cAE/C9F,EAAS,CACT,CAAE+F,MAAO,IAAIlc,IAAU+V,SAAS2F,EAAa,IAAK5D,SAAS,GAC3D,CAAEoE,MAAO,IAAIlc,IAAU+V,SAAS4F,EAAgB,IAAK7D,QAASxE,GAC9D,CAAE4I,MAAOL,EAAgB/D,QAAS1E,GAClC,CAAE8I,MAAOJ,EAAiBhE,QAASzE,GACnC,CAAE6I,MAAOF,EAAgBlE,SAAS,IAG7BqE,EAAI,EAAGA,EAAIhG,EAAOtH,OAAQsN,IAC/BhG,EAAOgG,GAAGD,MAAMpE,QAAU3B,EAAOgG,GAAGrE,QACpCvE,EAAI0B,QAAQgB,SAASE,EAAOgG,GAAGD,OAGnCL,EAAe1N,KAAO,IAAI7N,KAC1Bwb,EAAgB3N,KAAO,IAAI7N,KAC3B8b,WAAW,WACP7I,EAAI0B,QAAQoH,aAAaC,WAAa,IACtC/I,EAAI0B,QAAQsH,KAAK,IAAIvc,IAAUwc,SAAStJ,EAAMD,EAAME,IACpDI,EAAI0B,QAAQiB,UACT,KAEP3C,EAAI0B,QAAQiB,SACZ3C,EAAI0B,QAAQwH,aAAc,GAE3B,IAGE,CAAE9H,WAAU+H,cA3XjB,WACI,IAAI,IAAIhY,EAAE,EAAEA,EAAEwP,EAAcrF,OAAOnK,IACjC6O,EAAI0B,QAAQgF,YAAY/F,EAAcxP,IAIxCyP,EAAiB,SAACD,GAAD,MAAiB,KAElCX,EAAI0B,QAAQiB,UAmXgByG,WA/bb,SAACjR,EAAIkR,GAyDpB,IAAIC,EAAkB,IAAI7c,IAAUic,gBAAgB,aAAavQ,EAAIoR,WAAWC,QAAQ3b,KAAK4b,KAAqB,IAAhB5b,KAAK6b,WAEvG1J,EAAI0B,QAAQgB,SAAS4G,GAIP,IAAI7c,IAAUkd,cAAcxR,GAClCyR,KAfR,WACIpI,QAAQpF,IAAIkN,GACZ1I,EAAiB,SAACD,GAAD,SAAAkJ,OAAAhW,OAAAiW,EAAA,EAAAjW,CAAqB8M,GAArB,CAAmC2I,MACpDvG,EAAkBsG,GAClBrJ,EAAI0B,QAAQiB,UAjDhB,SAAoCoH,EAAUR,GAC1C,IAAI3S,EAAgB,GACpBA,EAAc6L,eAAiB8G,EAE/B,IAAIS,EAAsB,IAAIvd,IAAUwd,oBAAoB,MAqC5D,OApCAD,EAAoBE,WAAa,GACjCF,EAAoBG,WAAa,IAAI1d,IAAUgH,MAAM,EAAG,EAAG,EAAG,IAC9DuW,EAAoBI,gBAAgBC,OAAS,IAAI5d,IAAU6d,OACvD7d,IAAU8d,gBAAiB,EAC3B9d,IAAU8d,gBAAiB,GAI3BR,EAASS,eAAiBT,EAASU,mBACnC7T,EAAc8T,WAAa,IAAIje,IAAUwd,oBAAoBD,GAEtDD,EAASY,oBAAsBZ,EAASa,yBAC/ChU,EAAc8T,WAAWG,aAAc,EACvCjU,EAAc8T,WAAWI,aAAe,IAAIre,IAAUgH,MAClD,GAAMmD,EAAc8T,WAAWK,cAAcC,IAC7C,GAAMpU,EAAc8T,WAAWK,cAAcE,MAC7C,GAAMrU,EAAc8T,WAAWK,cAAcG,KAC7C,GAEJtU,EAAc8T,WAAWS,aAAe,IACjCpB,EAASqB,iBAAmBrB,EAASsB,wBAC5CzU,EAAc8T,WAAa,IAAIje,IAAU6e,gBAAgB,MACzD1U,EAAc8T,WAAWK,cAAgB,IAAIte,IAAUgH,MAAM,EAAG,EAAG,EAAG,IACtEmD,EAAc8T,WAAWI,aAAe,IAAIre,IAAUgH,MAAM,EAAG,EAAG,EAAG,IAErEmD,EAAc2U,oBAAsB,IAAI9e,IAAU6e,gBAAgB1U,EAAc8T,YAChF9T,EAAc2U,oBAAoBT,aAAe,IAAIre,IAAUgH,MAAM,EAAG,EAAG,EAAG,IAC9EmD,EAAc2U,oBAAoBR,cAAgB,IAAIte,IAAUgH,MAAM,EAAG,EAAG,EAAG,IAS5EmD,GAmBoD0S,IA+XvBkC,OAhX5C,aAgXoDC,gBA5fpD,WACIjK,QAAQpF,IAAI,mBACZ4D,EAAI0B,QAAQkB,OAAO,GAAG2B,SAAWvE,EAAI0B,QAAQkB,OAAO,GAAG2B,QACvDvE,EAAI0B,QAAQiB,UAyfqD+I,iBAngBrE,WACIlK,QAAQpF,IAAI,oBACZ4D,EAAI0B,QAAQkB,OAAO,GAAG2B,SAAWvE,EAAI0B,QAAQkB,OAAO,GAAG2B,QACvDvE,EAAI0B,QAAQiB,UAggBuEgJ,QAvOvF,SAAiBtC,GACbxG,EAAe,aAAajI,KAAOiI,EAAe,cAAcjI,KAAO,IAAI7N,KAAKsc,GAChFtG,EAAkBsG,GAGlBrJ,EAAI0B,QAAQiB,UAkOgFiJ,iBA5NhG,WACItL,EAAe,SAAAuL,GACbrK,QAAQpF,IAAI,mBAAmByP,GAC/B,IAAIC,EAAuB,CAAE,KAAM,kBAAmB,YAClDC,GAAWD,EAAqBE,QAAQH,GAAY,GAAGC,EAAqBxQ,OAEhF,OADAkG,QAAQpF,IAAI,kBAAkB0P,EAAqBC,IAC3CD,EAAqBC,IAC3B,IAAK,KACD/L,EAAI0B,QAAQ9I,MAAMqT,WAAa,IAAIxf,IAAUyf,gBAC7C,MACJ,IAAK,kBACDlM,EAAI0B,QAAQ9I,MAAMqT,WAAa,IAAIxf,IAAU0f,0BAC7C,MACJ,IAAK,WACDnM,EAAI0B,QAAQ9I,MAAMqT,WAAa,IAAIxf,IAAU2f,mBAC7C,MACJ,IAAK,cACDpM,EAAI0B,QAAQ9I,MAAMqT,WAAa,IAAIxf,IAAU4f,2BAA2B,SACxE,MACJ,IAAK,cACDrM,EAAI0B,QAAQ9I,MAAMqT,WAAa,IAAIxf,IAAU4f,2BAA2B,SACxE,MACJ,QACArM,EAAI0B,QAAQ9I,MAAMqT,WAAa,IAAIxf,IAAUyf,gBAG/C,OADAlM,EAAI0B,QAAQiB,SACLmJ,EAAqBC,MAkMgFO,YArflH,WACI9K,QAAQpF,IAAI,eACZ4D,EAAI0B,QAAQkB,OAAO,GAAG2B,SAAWvE,EAAI0B,QAAQkB,OAAO,GAAG2B,QACvDvE,EAAI0B,QAAQiB,UAkf+G4J,QA9hB/H,WACI,IAAMC,EAAMxM,EAAI0B,QACZ+K,EAAmB,EACnB5e,KAAK+D,IAAI4a,EAAI5H,UAAU8H,SAAW,GAClCD,EAAmB,EACZ5e,KAAK+D,IAAIgT,UAAU8H,SAAW,MACrCD,EAAmB,GAEnBD,EAAI5H,UAAU8H,QAAU,IACxBD,GAAoBA,GAYxB5D,WATmB,SAAf8D,IACI9e,KAAK+D,IAAI4a,EAAI5H,UAAU8H,SAAW7e,KAAK+D,IAAI6a,IAC3CD,EAAI5H,UAAU8H,SAAWD,EACzB5D,WAAW8D,EAAc,KAEzBH,EAAI5H,UAAU8H,QAAU,EAE5BF,EAAI7J,UAEiB,kBCdlBiK,MAjDf,SAAApb,GAAgF,IAA/Dqb,EAA+Drb,EAA/Dqb,SAAUvc,EAAqDkB,EAArDlB,GAAqDwc,EAaxErN,EAAO,CACPnP,GAAIA,EACJqP,KAfwEnO,EAAjDmO,KAgBvBD,KAhBwElO,EAA3CkO,KAiB7BE,IAjBwEpO,EAArCoO,IAkBnCC,UAlBwErO,EAAhCqO,UAmBxCC,WAnBwEtO,EAArBsO,WAoBnDC,MApBwEvO,EAATuO,QAK/DoJ,GALwE2D,EAGxE1L,SAHwE0L,EAIxE1D,WAJwE0D,EAKxE3D,eAEAyC,GAPwEkB,EAMxEtB,OANwEsB,EAOxElB,kBACAF,EARwEoB,EAQxEpB,iBACAD,EATwEqB,EASxErB,gBACAa,EAVwEQ,EAUxER,YACAX,EAXwEmB,EAWxEnB,QACAY,EAZwEO,EAYxEP,QAgCJ,OArBAQ,YAAW,IAAInB,GACfmB,YAAW,IAAIrB,GACfqB,YAAW,IAAItB,GACfsB,YAAW,IAAIT,GACfS,YAAW,IAAI5D,GACf4D,YAAW,IAAIR,GAEfvF,oBAAU,WACN2E,EAAQkB,EAASxI,YACnB,CAACwI,IAaKG,EAAA3b,EAAA4b,cAAA,UAAQ3c,GAAIA,EAAI4c,MATP,CACbC,WAAY,UACZtH,SAAU,QACVuH,KAAM,EACNpH,MAAO,OACPL,OAAQ,kCC9BD0H,MAjBf,SAAA7b,GAAgD,IAA5B1E,EAA4B0E,EAA5B1E,KAAMwgB,EAAsB9b,EAAtB8b,UAAWC,EAAW/b,EAAX+b,SAGjC,OACIP,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,kBACXR,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,QACXR,EAAA3b,EAAA4b,cAAA,OAAKO,UAAuB,QAAZF,GAAiC,SAAZA,EAAmB,WAAW,qBAAuBnX,IAAI,OAASsX,IAAW3gB,EAAK,WACvHkgB,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,aACXR,EAAA3b,EAAA4b,cAAA,OAAKO,UAAuB,UAAZF,GAAmC,SAAZA,EAAmB,cAAc,wBAA0BnX,IAAI,SAAUsX,IAAW3gB,EAAK,WAAW4gB,eAC3IV,EAAA3b,EAAA4b,cAAA,OAAKO,UAAuB,SAAZF,GAAkC,SAAZA,EAAmB,aAAa,sBAAwBnX,IAAI,QAASrJ,EAAKgC,oBAGxHke,EAAA3b,EAAA4b,cAAA,OAAKO,UAAWD,EAAS,oBAAoB,OAAQpX,IAAI,SACzD6W,EAAA3b,EAAA4b,cAAA,OAAKO,UAAuB,SAAZF,GAAkC,SAAZA,EAAmB,aAAa,sBAAuBnX,IAAI,QAASsX,IAAW3gB,EAAK,yBC8CvH6gB,MAxDf,SAAAnc,GAAmD,IAA1Boc,EAA0Bpc,EAA1Boc,UAAWC,EAAerc,EAAfqc,aAAeC,ECJ5C,SAAAtc,GAAqD,IAAjCuc,EAAiCvc,EAAjCuc,UAAqBC,GAAYxc,EAAtByc,SAAsBzc,EAAZwc,UAAY9N,EAKhCC,mBAAS6N,GALuB5N,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GAKjDpT,EALiDsT,EAAA,GAK3C8N,EAL2C9N,EAAA,GAAAG,EAM1BJ,oBAAS,GANiBK,EAAA3M,OAAAwM,EAAA,EAAAxM,CAAA0M,EAAA,GAMjD4N,EANiD3N,EAAA,GAMxC4N,EANwC5N,EAAA,GAUlD6N,EAAOpO,mBACPqO,EAAcrO,mBAEpBqO,EAAY5M,QAAU,GAEtB,IAAM6M,EAAQtO,mBAGRuO,EAAcvO,mBACdwO,EAAaxO,mBAuCnB,SAASyO,IACLlN,QAAQpF,IAAI,eACRiS,EAAK3M,UAAS2M,EAAK3M,QAAU,MACjC8M,EAAY9M,QAAUiN,YAAa,WAC/BJ,EAAM7M,SAAW2M,EAAK3M,QACtBwM,EAAQ,IAAInhB,KAAKwhB,EAAM7M,WACzB4M,EAAY5M,SAEd0M,GAAW,GAGf,SAAS3J,IACLjD,QAAQpF,IAAI,cACTqS,EAAW/M,SAASkN,aAAaH,EAAW/M,SAC3C8M,EAAY9M,SAASmN,cAAcL,EAAY9M,SACnD0M,GAAW,GAiDjB,OA1BEpH,oBAAU,WACNxF,QAAQpF,IAAI,uBAAuB4R,EAASc,UAEvCX,GACG1J,IACJ8J,EAAM7M,QAAUsM,EAAS3J,UACzBqK,KAEAH,EAAM7M,QAAUsM,EAAS3J,WAE9B,CAAC2J,IAKJhH,oBAAU,WACNxF,QAAQpF,IAAI,mBAEZmS,EAAM7M,SAAU,IAAI3U,MAAOsX,UACvB0J,GACAW,KAGL,IAGE,CAAE5hB,OAAMqhB,UAASY,YAxEtB,WACQZ,EACA1J,IAEAiK,KAoE2BM,MA7CnC,WACIvK,IACA8J,EAAM7M,SAAU,IAAI3U,MAAOsX,UAC3B6J,EAAQ,IAAInhB,KAAKwhB,EAAM7M,WA0CeuN,cAtF1C,WAEIZ,EAAK3M,QAAW2M,EAAK3M,QAAU,EAAI2M,EAAK3M,SAAW,EAAE2M,EAAK3M,SAAW,EAClE7T,KAAK+D,IAAIyc,EAAK3M,SAAW4M,EAAY5M,UAAS2M,EAAK3M,QAAU4M,EAAY5M,SAC5EF,QAAQpF,IAAI,SAASiS,EAAK3M,UAkF2BwN,cA9EzD,WACIb,EAAK3M,QAAW2M,EAAK3M,QAAU,EAAI2M,EAAK3M,SAAW,EAAE2M,EAAK3M,SAAW,EAClE7T,KAAK+D,IAAIyc,EAAK3M,SAAW4M,EAAY5M,UAAS2M,EAAK3M,SAAW,EAAI4M,EAAY5M,UA4EbyN,UArCxE,SAAmBC,GACf5N,QAAQpF,IAAI,uBAAuBgT,EAAQN,UACxCX,GACC1J,IACA8J,EAAM7M,QAAU0N,EAAQ/K,UACxBqK,KAEAH,EAAM7M,QAAU0N,EAAQ/K,YD9E5BgL,CAAS,CACTtB,WAAW,EACXE,SAAU,IACVD,SAAUJ,IAVV9gB,EAH2CghB,EAG3ChhB,KAEAiiB,EAL2CjB,EAK3CiB,YACAC,EAN2ClB,EAM3CkB,MACAC,EAP2CnB,EAO3CmB,cACAC,EAR2CpB,EAQ3CoB,cAUJnC,YAAW,IAAIgC,GACfhC,YAAW,IAAI,WAAKiC,MACpBjC,YAAW,IAAIkC,GACflC,YAAW,IAAImC,GAKflI,oBAAU,WAEN6G,EAAa/gB,IAGf,CAACA,IAEHka,oBAAU,aAKR,CAAC4G,IAtC4C,IAAA1N,EAwCjBC,qBAxCiBC,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GAwCxCoP,EAxCwClP,EAAA,GAwC/BmP,EAxC+BnP,EAAA,GAoD/C,OACI4M,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,iBAAiBgC,QAZZ,WACpB,IAAMC,EAAM1iB,KAAK0iB,MACbH,GAAYG,EAAMH,EAAW,IAC/BN,KAEEO,EAAWE,GACXV,uCEkGGW,MApJf,SAAAle,GAA0D,IAA9B1E,EAA8B0E,EAA9B1E,KAAM6iB,EAAwBne,EAAxBme,WAAYC,EAAYpe,EAAZoe,UAEpCC,EAAQ5P,mBAFwCC,EAG5BC,mBAASrT,GAHmBsT,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GAAAK,GAAAH,EAAA,GAAAA,EAAA,GAI1BD,oBAAS,IAJiBK,EAAA3M,OAAAwM,EAAA,EAAAxM,CAAA0M,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAKpBL,mBAAS,KALWO,EAAA7M,OAAAwM,EAAA,EAAAxM,CAAA4M,EAAA,GAK/CqP,EAL+CpP,EAAA,GAKpCqP,EALoCrP,EAAA,GAStDsG,oBAAU,WACN,OAAO,eAGX,IAAMgJ,EAAY,SAACC,EAAQC,GAEvB,GAAIL,EAAMnO,QAAV,CAmBA,IAjBA,IAIIzS,EAAKF,EAAOohB,EAJVC,EAAY,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAI/DvhB,EAAO,EACzBwhB,EAAS,EACTC,EAAY,EACZC,EAAW,EACXC,EAAW,EACXC,EAAO,GACPC,EAAWR,EAAQ,OACnBS,EAAYT,EAAQ,MACpBU,EAAUV,EAAQ,KAClBW,EAAeX,EAAQ,KACvBY,EAAWZ,EAAQ,KAGb/e,EAAE,EAAIA,EAAI0e,EAAMnO,QAAQqP,aAAe5f,GAAG,EAAI,CACpD,IAAI6f,EAAU,IAAIjkB,MAAOoE,EAAG0e,EAAMnO,QAAQqP,aAAa,GAAKb,EAAQD,EAAO5L,WAC3EpV,EAAM+hB,EAAQ9hB,aACdH,EAAQqhB,EAAUY,EAAQhiB,eAC1BmhB,EAAOa,EAAQ5hB,cACfP,EAAOmiB,EAAQliB,iBAEX+hB,EACGV,GAAQK,IACK,GAARL,GAAsBA,EAzBR,GAAM,IAyBWW,EAGnB,GAARX,IACAM,EAAK/R,KAAK,CAACuS,MAAM,SAAUC,IAAK/f,EAAGggB,MAAOliB,IAC1CwhB,EAAK/R,KAAK,CAACuS,MAAM,WAAYC,IAAK/f,EAAGggB,MAAOpiB,IAC5C0hB,EAAK/R,KAAK,CAACuS,MAAM,UAAWC,IAAK/f,EAAGggB,MAAOtiB,KAL/C4hB,EAAK/R,KAAK,CAACuS,MAAM,UAAWC,IAAK/f,EAAGggB,MAAOhB,KAU5CS,EACJ3hB,IAAQohB,IACI,GAAPphB,EACAwhB,EAAK/R,KAAK,CAACuS,MAAM,SAAUC,IAAK/f,EAAGggB,MAAOliB,KAE1CwhB,EAAK/R,KAAK,CAACuS,MAAM,SAAUC,IAAK/f,EAAGggB,MAAOliB,IAC1CwhB,EAAK/R,KAAK,CAACuS,MAAM,WAAYC,IAAK/f,EAAGggB,MAAOpiB,IAC5C0hB,EAAK/R,KAAK,CAACuS,MAAM,UAAWC,IAAK/f,EAAGggB,MAAOtiB,MAK5C8hB,EACJ5hB,IAAUuhB,GAAsB,GAATD,GAAcM,IACtB,QAAV5hB,EACA0hB,EAAK/R,KAAK,CAACuS,MAAM,WAAYC,IAAK/f,EAAGggB,MAAOpiB,KAE5C0hB,EAAK/R,KAAK,CAACuS,MAAM,WAAYC,IAAK/f,EAAGggB,MAAOpiB,IAC5C0hB,EAAK/R,KAAK,CAACuS,MAAM,UAAWC,IAAK/f,EAAGggB,MAAOtiB,MAI5C6hB,GACJ7hB,IAAS0hB,GAA0B,IAAdD,IACN,QAAVvhB,EACA0hB,EAAK/R,KAAK,CAACuS,MAAM,WAAYC,IAAK/f,EAAGggB,MAAOpiB,IAG5C0hB,EAAK/R,KAAK,CAACuS,MAAM,UAAWC,IAAK/f,EAAGggB,MAAOtiB,KAMvDwhB,EAAUphB,EACVshB,EAAW1hB,EACXyhB,EAAYvhB,EACZyhB,EAAWL,EAGf,OAAOM,EAAKW,IAAI,SAAAC,GAAI,OAAiBrE,EAAA3b,EAAA4b,cAAA,OAAKO,UAAW6D,EAAKJ,MAAO9a,IAAKkb,EAAKJ,MAAMI,EAAKH,IAAKhE,MAAO,CAACoE,IAAID,EAAKH,MAAOG,EAAKF,WA9FtEI,EAsGrBC,YAAU,iBAAO,CAAEC,MAAO3kB,EAAKuX,UAAWqN,OAAQ/B,KAtG7BgC,EAAA9d,OAAAwM,EAAA,EAAAxM,CAAA0d,EAAA,GAAAK,EAAAD,EAAA,GAsG7CF,EAtG6CG,EAsG7CH,MAAOC,EAtGsCE,EAsGtCF,OAAUG,EAtG4BF,EAAA,GA8ItD,OAvCAG,0BAAgB,WAGZD,EAAI,CACAE,GAAI,CACAL,OAAQ/B,EACR8B,MAAO3kB,EAAKuX,WAEhB2N,OAAQ,CAAG/D,SAAU,KACrB2B,WAAW,EACXqC,QAAS,WAGLlC,EAAaC,EAAU,IAAIjjB,KAAK0kB,EAAMrS,OAAOsS,EAAOtS,YAI9D,CAAEuQ,IAEJmC,0BAAgB,WAGZD,EAAI,CACAE,GAAI,CACAL,OAAQ/B,EACR8B,MAAO3kB,EAAKuX,WAEhB2N,OAAQ,CAAG/D,SAAU,KACrB2B,UAAWA,EACXqC,QAAS,WAGLlC,EAAaC,EAAU,IAAIjjB,KAAK0kB,EAAMrS,OAAOsS,EAAOtS,YAI9D,CAACtS,IAICkgB,EAAA3b,EAAA4b,cAACiF,EAAA,EAASC,IAAV,CAAcC,IAAKvC,EAAOrC,UAAU,qBAC/BsC,ICGEuC,MA7If,SAAA7gB,GAAoE,IAA7Coc,EAA6Cpc,EAA7Coc,UAAWC,EAAkCrc,EAAlCqc,aAAcyE,EAAoB9gB,EAApB8gB,kBACtCC,EAAW,CAAE,KAAc,MAAe,QAC1CC,EAAa,CAAE,KAAa,IAAY,MAAa,KAAS,OAG9DC,EAAWxS,mBACXoK,EAASpK,mBACXoK,EAAO3I,UAAS2I,EAAO3I,QAAU,CAAC,EAAG,IAPuB,IAAAxB,EAS7BC,mBAASyN,GAToBxN,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GASzDwS,EATyDtS,EAAA,GAS9CuS,EAT8CvS,EAAA,GAAAG,EAYpBJ,mBAASyN,GAZWpN,EAAA3M,OAAAwM,EAAA,EAAAxM,CAAA0M,EAAA,GAYzDqS,EAZyDpS,EAAA,GAY1CqS,EAZ0CrS,EAAA,GAAAC,EAc/BN,mBAASyN,GAdsBlN,EAAA7M,OAAAwM,EAAA,EAAAxM,CAAA4M,EAAA,GAczDqS,EAdyDpS,EAAA,GAc/CqS,EAd+CrS,EAAA,GAAAG,EAenCV,oBAAS,GAf0BW,EAAAjN,OAAAwM,EAAA,EAAAxM,CAAAgN,EAAA,GAezDmS,EAfyDlS,EAAA,GAejDmS,EAfiDnS,EAAA,GAAAC,EAkB3BZ,mBAASoS,EAAS,IAlBSpR,EAAAtN,OAAAwM,EAAA,EAAAxM,CAAAkN,EAAA,GAkBzD4O,EAlByDxO,EAAA,GAkB7C+R,EAlB6C/R,EAAA,GAAAoQ,EAoB1CC,YAAU,iBAAO,CAAE2B,GAAI,CAAC,EAAE,MApBgBxB,EAAA9d,OAAAwM,EAAA,EAAAxM,CAAA0d,EAAA,GAoBvD4B,EApBuDxB,EAAA,GAoBvDwB,GAAMtB,EApBiDF,EAAA,GAsB1D/U,EAAOwW,YAAW,CAEpBC,OAAQ,SAAA/f,GAKF,IAIEggB,EACAC,EAVIC,EAKNlgB,EALMkgB,MAAOC,EAKbngB,EALamgB,MAAOC,EAKpBpgB,EALoBogB,KAAMC,EAK1BrgB,EAL0BqgB,MAAOC,EAKjCtgB,EALiCsgB,SAAUC,EAK3CvgB,EAL2CugB,UAK3CC,EAAAxgB,EALsDygB,YAKtD,IAAAD,EAL6D,CAC/DX,GAAIA,EAAGa,WACPC,aAAc,EACdC,YAAa,CAAC,EAAE,IAEdJ,EACEK,EAAU1B,EAAS/Q,QAAQ0S,cAAcC,aAAeb,EAAMc,MAAMd,EAAMc,MAAM7B,EAAS/Q,QAAQ0S,cAAcC,aAwEnH,OAvEeb,EAAMe,MAAMf,EAAMe,MAAM9B,EAAS/Q,QAAQ0S,cAAcrD,cAAgB0B,EAAS/Q,QAAQqP,aAAa,EAKvG,GACTuC,EAAWzlB,KAAK0O,IAAIgW,EAASjX,OAAO,EAAEzN,KAAK+Q,OAAOuV,EAAQ1B,EAAS/Q,QAAQ2S,aAAa,GAAG,IAG3Fd,EAAOhB,EADPe,GADAA,EAAYA,EAAWf,EAASjX,OAAO,EAAGiX,EAASjX,OAAOgY,GACnC,EAAG,EAAEA,KAG5BA,EAAWzlB,KAAK0O,IAAIiW,EAAWlX,OAAO,EAAEzN,KAAK+Q,OAAOuV,EAAQ1B,EAAS/Q,QAAQ2S,aAAa,GAAG,IAG7Fd,EAAOf,EADPc,GADAA,EAAYA,EAAWd,EAAWlX,OAAO,EAAGkX,EAAWlX,OAAOgY,GACvC,EAAG,EAAEA,IAc5BA,IAAaS,EAAKE,eAClBzS,QAAQpF,IAAI,kBAAkB2X,EAAKE,aAAa,OAAOX,GAEvDJ,EAAcK,GACdR,EAAYL,GACZqB,EAAKE,aAAeX,EACpBS,EAAKZ,GAAK,CAAC,EAAE,GACbY,EAAKG,YAAcP,GAInBF,GAAOR,GAAU,GAErBW,EAAY/lB,KAAK+D,IAAIgiB,GAAU,GAAI,EAAEA,EAGrC/B,EAAI,CAEAsB,GAAIqB,cAAI3E,gBAAM2E,cAAIC,cAAId,EAAMI,EAAKG,aAAa7J,EAAO3I,SA3B9C,GA2B8DqS,EAAKZ,IAC1EvD,UAAW8D,EACX1B,OAAQ,CAAE4B,SAAU/D,gBAAMgE,EA7BnB,EA6B8BD,GAAgBc,OAAO,GAK5DzC,QAAS,WACL,IAAI7C,EAAU,IAAIriB,KAAK+lB,EAASzO,UAAY8O,EAAGa,WAAW,GAAKrE,GAE/DgD,EAAavD,GACbyD,EAAkBzD,IAItBuF,OAAQ,WACJ,IAAKjB,EAAM,CAEPT,GAAU,GACV,IAAI7D,EAAU,IAAIriB,KAAK+lB,EAASzO,UAAY8O,EAAGa,WAAW,GAAKrE,GAC/D2C,EAAkBlD,GAClB/E,EAAO3I,QAAU,CAAC,EAAE,OAKzBqS,KAuBf,OAlBA/M,oBAAU,WAGFgM,IACA3I,EAAO3I,QAAQ,KAAOkM,EAAUvJ,UAAYuO,EAAcvO,WAAcsL,EAExEgD,EAAa/E,GACbiF,EAAkBjF,KAGxB,CAACA,IAEH5G,oBAAU,WACN6G,EAAa6E,IACf,CAACA,IAKC1F,EAAA3b,EAAA4b,cAACiF,EAAA,EAASC,IAAVte,OAAA+gB,OAAA,GAAkBhY,IAAlB,CAA0B4Q,UAAU,eAAe4E,IAAKK,IACpDzF,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,QAEXR,EAAA3b,EAAA4b,cAAC4H,EAAD,CAAmBrH,UAAU,QAAQ1gB,KAAM4lB,EAAW/C,WAAYA,EAAYC,UAAWoD,IAEzFhG,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,qBACXR,EAAA3b,EAAA4b,cAAA,OAAKtH,OAAO,KAAKK,MAAM,KAAKwH,UAAU,YAClCR,EAAA3b,EAAA4b,cAAA,WAAS6H,OAAO,0BClGzBC,MAvCf,SAAAvjB,GAA8E,IAAxDoc,EAAwDpc,EAAxDoc,UAAWC,EAA6Crc,EAA7Cqc,aAAiCmH,GAAYxjB,EAA/B8gB,kBAA+B9gB,EAAZwjB,WAAY9U,EAExBC,mBAASyN,GAFexN,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GAEnE+U,EAFmE7U,EAAA,GAEhD8U,EAFgD9U,EAAA,GAAAG,EAGpBJ,mBAASyN,GAHWpN,EAAA3M,OAAAwM,EAAA,EAAAxM,CAAA0M,EAAA,GAGnE4U,EAHmE3U,EAAA,GAG9C4U,EAH8C5U,EAAA,GAAAC,EAIxCN,mBAASyN,GAJ+BlN,EAAA7M,OAAAwM,EAAA,EAAAxM,CAAA4M,EAAA,GAInE4U,EAJmE3U,EAAA,GAIxD4U,EAJwD5U,EAAA,GA+B1E,OAPAsG,oBAAU,WAENkO,EAAqBtH,IACvB,CAACA,IAKCZ,EAAA3b,EAAA4b,cAAA,WACED,EAAA3b,EAAA4b,cAACsI,EAAD,CAAgB3H,UAAWuH,EAAqBtH,aAdnB,SAAC/gB,GAEhCooB,EAAqBpoB,MAanBkgB,EAAA3b,EAAA4b,cAACuI,EAAD,CAAW1oB,KAAMuoB,EAAW/H,UAAU,OAAOC,SAAUyH,IACvDhI,EAAA3b,EAAA4b,cAACwI,EAAD,CAAc7H,UAAWqH,EAAmBpH,aA7BjB,SAAC/gB,GAE9BwoB,EAAaxoB,GACb+gB,EAAa/gB,IA0ByEwlB,kBAtBpD,SAACxlB,GAEnCsoB,EAAuBtoB,mCC2BhB4oB,OArCf,WAEI,IAAI1H,EAAW,IAAIjhB,KAFRmT,EAGqBC,mBAAS6N,GAH9B5N,EAAAvM,OAAAwM,EAAA,EAAAxM,CAAAqM,EAAA,GAGJ2M,EAHIzM,EAAA,GAGMuV,EAHNvV,EAAA,GAAAG,EAIWJ,mBAAS6N,GAAxBJ,EAJI/Z,OAAAwM,EAAA,EAAAxM,CAAA0M,EAAA,MAAAE,EAKWN,oBAAS,GAAxB6U,EALInhB,OAAAwM,EAAA,EAAAxM,CAAA4M,EAAA,MAYXuG,oBAAU,aAER,IAEFA,oBAAU,aAER,CAAC4G,IAlBQ,IAAA/M,EAoBgBV,oBAAS,GApBzBW,EAAAjN,OAAAwM,EAAA,EAAAxM,CAAAgN,EAAA,GAoBJ+U,EApBI9U,EAAA,GAoBG+U,EApBH/U,EAAA,GAAAgV,EAqBgCC,aAAc7W,OAAOH,SAASiX,MAAjEC,EArBGH,EAqBHG,aAAcC,EArBXJ,EAqBWI,iBAItB,OAHAnJ,YAAW,IAAImJ,GAIXlJ,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,OACXR,EAAA3b,EAAA4b,cAACkJ,GAAA9kB,EAAD,CAAYkT,QAASqR,EAAQQ,SAAU,WAAYH,GAAcJ,GAAU,KACvE7I,EAAA3b,EAAA4b,cAAA,OAAKO,UAAU,SACXR,EAAA3b,EAAA4b,cAACoJ,EAAD,CAAOxJ,SAAUA,EAAUvc,GAAG,QAAQuP,UAAU,OAAOC,WAAW,OAAOJ,KAAK,MAAMC,KAAK,KAAKI,MAAM,UAExGiN,EAAA3b,EAAA4b,cAACqJ,EAAD,CAAa1I,UAAWA,EAAYoH,UAAWA,EAAWnH,aAxBnD,SAACuB,GAEhBuG,EAAYvG,SCRAmH,QACW,cAA7BrX,OAAOsX,SAASC,UAEe,UAA7BvX,OAAOsX,SAASC,UAEhBvX,OAAOsX,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5J,EAAA3b,EAAA4b,cAAC4J,GAAD,MAAS9X,SAAS+X,eAAe,SD2H3C,kBAAmBlS,WACrBA,UAAUmS,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d98d112a.chunk.js","sourcesContent":["/*\n * Copyright 2015-2017 WorldWind Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport WorldWind from 'webworldwind-esa';\nconst {\n    Angle,\n    ArgumentError,\n    Logger\n} = WorldWind;\n\n/**\n * Provides utilities for determining the Sun geographic and celestial location.\n * @exports SunPosition\n */\nconst SunPosition = {\n\n    /**\n     * Computes the geographic location of the sun for a given date\n     * @param {Date} date\n     * @throws {ArgumentError} if the date is missing\n     * @return {{latitude: Number, longitude: Number}} the geographic location\n     */\n    getAsGeographicLocation: function (date) {\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"getAsGeographicLocation\",\n                    \"missingDate\"));\n        }\n\n        let celestialLocation = this.getAsCelestialLocation(date);\n        return this.celestialToGeographic(celestialLocation, date);\n    },\n\n    /**\n     * Computes the celestial location of the sun for a given julianDate\n     * @param {Date} date\n     * @throws {ArgumentError} if the date is missing\n     * @return {{declination: Number, rightAscension: Number}} the celestial location\n     */\n    getAsCelestialLocation: function (date) {\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"getAsCelestialLocation\",\n                    \"missingDate\"));\n        }\n\n        let julianDate = this.computeJulianDate(date);\n\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        let numDays = julianDate - 2451545;\n\n        let meanLongitude = this.normalizeAngle360(280.460 + 0.9856474 * numDays);\n\n        let meanAnomaly = this.normalizeAngle360(357.528 + 0.9856003 * numDays) * Angle.DEGREES_TO_RADIANS;\n\n        let eclipticLongitude = meanLongitude + 1.915 * Math.sin(meanAnomaly) + 0.02 * Math.sin(2 * meanAnomaly);\n        let eclipticLongitudeRad = eclipticLongitude * Angle.DEGREES_TO_RADIANS;\n\n        let obliquityOfTheEcliptic = (23.439 - 0.0000004 * numDays) * Angle.DEGREES_TO_RADIANS;\n\n        let declination = Math.asin(Math.sin(obliquityOfTheEcliptic) * Math.sin(eclipticLongitudeRad)) *\n            Angle.RADIANS_TO_DEGREES;\n\n        let rightAscension = Math.atan(Math.cos(obliquityOfTheEcliptic) * Math.tan(eclipticLongitudeRad)) *\n            Angle.RADIANS_TO_DEGREES;\n\n        //compensate for atan result\n        if (eclipticLongitude >= 90 && eclipticLongitude < 270) {\n            rightAscension += 180;\n        }\n        rightAscension = this.normalizeAngle360(rightAscension);\n\n        return {\n            declination: declination,\n            rightAscension: rightAscension\n        };\n    },\n\n    /**\n     * Converts from celestial coordinates (declination and right ascension) to geographic coordinates\n     * (latitude, longitude) for a given julian date\n     * @param {{declination: Number, rightAscension: Number}} celestialLocation\n     * @param {Date} date\n     * @throws {ArgumentError} if celestialLocation or julianDate are missing\n     * @return {{latitude: Number, longitude: Number}} the geographic location\n     */\n    celestialToGeographic: function (celestialLocation, date) {\n        if (!celestialLocation) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"celestialToGeographic\",\n                    \"missingCelestialLocation\"));\n        }\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"celestialToGeographic\", \"missingDate\"));\n        }\n\n        let julianDate = this.computeJulianDate(date);\n\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        let numDays = julianDate - 2451545;\n\n        //Greenwich Mean Sidereal Time\n        let GMST = this.normalizeAngle360(280.46061837 + 360.98564736629 * numDays);\n\n        //Greenwich Hour Angle\n        let GHA = this.normalizeAngle360(GMST - celestialLocation.rightAscension);\n\n        let longitude = Angle.normalizedDegreesLongitude(-GHA);\n\n        return {\n            latitude: celestialLocation.declination,\n            longitude: longitude\n        };\n    },\n\n    /**\n     * Computes the julian date from a javascript date object\n     * @param {Date} date\n     * @throws {ArgumentError} if the date is missing\n     * @return {Number} the julian date\n     */\n    computeJulianDate: function (date) {\n        if (date instanceof Date === false) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"SunPosition\", \"computeJulianDate\", \"missingDate\"));\n        }\n\n        let year = date.getUTCFullYear();\n        let month = date.getUTCMonth() + 1;\n        let day = date.getUTCDate();\n        let hour = date.getUTCHours();\n        let minute = date.getUTCMinutes();\n        let second = date.getUTCSeconds();\n\n        let dayFraction = (hour + minute / 60 + second / 3600) / 24;\n\n        if (month <= 2) {\n            year -= 1;\n            month += 12;\n        }\n\n        let A = Math.trunc(year / 100);\n        let B = 2 - A + Math.trunc(A / 4);\n        let JD0h = Math.trunc(365.25 * (year + 4716)) + Math.trunc(30.6001 * (month + 1)) + day + B - 1524.5;\n\n        return JD0h + dayFraction;\n    },\n\n    /**\n     * Restricts an angle to the range [0, 360] degrees, wrapping angles outside the range.\n     * Wrapping takes place as though traversing the edge of a unit circle;\n     * angles less than 0 wrap back to 360, while angles greater than 360 wrap back to 0.\n     *\n     * @param {Number} degrees the angle to wrap in degrees\n     *\n     * @return {Number} the specified angle wrapped to [0, 360] degrees\n     */\n    normalizeAngle360: function(degrees) {\n        let angle = degrees % 360;\n        return angle >= 0 ? angle : (angle < 0 ? 360 + angle : 360 - angle);\n    }\n\n};\n\nexport default SunPosition;","import WorldWind from 'webworldwind-esa';\nimport SunPosition from './SunPosition';\nconst {\n    Angle\n} = WorldWind;\n\nconst Celestial = {\n\n    SUN: 0,\n    MERCURY: 1,\n    VENUS: 2,\n    MARS: 4,\n    JUPITER: 5,\n    SATURN: 6,\n    URANUS: 7,\n    NEPTUNE: 8,\n\n    getCelestialLocation(id, date) {\n        let orbitalElements;\n        const julianDate = SunPosition.computeJulianDate(date);\n        let d = julianDate - 2451543.5;\n        //d = -3543.0;\n\n        switch (id) {\n            case this.SUN:\n                orbitalElements = this.computeSun(d);\n                break;\n\n            case this.MERCURY:\n                orbitalElements = this.computeMercury(d);\n                break;\n\n            case this.VENUS:\n                orbitalElements = this.computeVenus(d);\n                break;\n\n            case this.MARS:\n                orbitalElements = this.computeMars(d);\n                break;\n\n            case this.JUPITER:\n                orbitalElements = this.computeJupiter(d);\n                break;\n\n            case this.SATURN:\n                orbitalElements = this.computeSaturn(d);\n                break;\n\n            case this.URANUS:\n                orbitalElements = this.computeUranus(d);\n                break;\n\n            case this.NEPTUNE:\n                orbitalElements = this.computeNeptune(d);\n                break;\n        }\n\n        return this.computePosition(d, orbitalElements);\n    },\n\n    computeMercury(d) {\n        const N = 48.3313 + 3.24587E-5 * d;\n        const i = 7.0047 + 5.00E-8 * d;\n        const w = 29.1241 + 1.01444E-5 * d;\n        const a = 0.387098;  //(AU)\n        const e = 0.205635 + 5.59E-10 * d;\n        const M = 168.6562 + 4.0923344368 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeVenus(d) {\n        const N = 76.6799 + 2.46590E-5 * d;\n        const i = 3.3946 + 2.75E-8 * d;\n        const w = 54.8910 + 1.38374E-5 * d;\n        const a = 0.723330;//  (AU)\n        const e = 0.006773 - 1.302E-9 * d;\n        const M = 48.0052 + 1.6021302244 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeMars(d) {\n        const N = 49.5574 + 2.11081E-5 * d;\n        const i = 1.8497 - 1.78E-8 * d;\n        const w = 286.5016 + 2.92961E-5 * d;\n        const a = 1.523688;  //(AU)\n        const e = 0.093405 + 2.516E-9 * d;\n        const M = 18.6021 + 0.5240207766 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeJupiter(d) {\n        const N = 100.4542 + 2.76854E-5 * d;\n        const i = 1.3030 - 1.557E-7 * d;\n        const w = 273.8777 + 1.64505E-5 * d;\n        const a = 5.20256;  //(AU)\n        const e = 0.048498 + 4.469E-9 * d;\n        const M = 19.8950 + 0.0830853001 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeSaturn(d) {\n        const N = 113.6634 + 2.38980E-5 * d;\n        const i = 2.4886 - 1.081E-7 * d;\n        const w = 339.3939 + 2.97661E-5 * d;\n        const a = 9.55475;  //(AU)\n        const e = 0.055546 - 9.499E-9 * d;\n        const M = 316.9670 + 0.0334442282 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeUranus(d) {\n        const N = 74.0005 + 1.3978E-5 * d;\n        const i = 0.7733 + 1.9E-8 * d;\n        const w = 96.6612 + 3.0565E-5 * d;\n        const a = 19.18171 - 1.55E-8 * d;//  (AU)\n        const e = 0.047318 + 7.45E-9 * d;\n        const M = 142.5905 + 0.011725806 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeNeptune(d) {\n        const N = 131.7806 + 3.0173E-5 * d;\n        const i = 1.7700 - 2.55E-7 * d;\n        const w = 272.8461 - 6.027E-6 * d;\n        const a = 30.05826 + 3.313E-8 * d;//  (AU)\n        const e = 0.008606 + 2.15E-9 * d;\n        const M = 260.2471 + 0.005995147 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computeSun(d) {\n        const N = 0.0;\n        const i = 0.0;\n        const w = 282.9404 + 4.70935E-5 * d;\n        const a = 1.000000;  //(AU)\n        const e = 0.016709 - 1.151E-9 * d;\n        const M = 356.0470 + 0.9856002585 * d;\n\n        return {N, i, w, a, e, M};\n    },\n\n    computePosition(d, {N, i, w, a, e, M}) {\n        N = SunPosition.normalizeAngle360(N) * Angle.DEGREES_TO_RADIANS;\n        i = SunPosition.normalizeAngle360(i) * Angle.DEGREES_TO_RADIANS;\n        w = SunPosition.normalizeAngle360(w) * Angle.DEGREES_TO_RADIANS;\n        //e = SunPosition.normalizeAngle360(e) * Angle.DEGREES_TO_RADIANS;\n        M = SunPosition.normalizeAngle360(M) * Angle.DEGREES_TO_RADIANS;\n\n        let E = M + e * Math.sin(M) * (1.0 + e * Math.cos(M));\n\n        if (e >= 0.06) {\n            for (var aa = 0; aa < 10; aa++) {\n                var E1 = E - (E - e * Math.sin(E) - M) / (1 - e * Math.cos(E));\n                if (Math.abs(E1 - E) < 0.001) {\n                    E = E1;\n                    break;\n                }\n                E = E1;\n            }\n        }\n\n        const xv = a * (Math.cos(E) - e);\n        const yv = a * (Math.sqrt(1.0 - e * e) * Math.sin(E));\n\n        const v = Math.atan2(yv, xv);\n        const r = Math.sqrt(xv * xv + yv * yv);\n\n        let xh = r * (Math.cos(N) * Math.cos(v + w) - Math.sin(N) * Math.sin(v + w) * Math.cos(i));\n        let yh = r * (Math.sin(N) * Math.cos(v + w) + Math.cos(N) * Math.sin(v + w) * Math.cos(i));\n        let zh = r * (Math.sin(v + w) * Math.sin(i));\n\n        const Epoch = 2000.0;\n        const lon_corr = 3.82394E-5 * (365.2422 * (Epoch - 2000.0) - d) * Angle.DEGREES_TO_RADIANS;\n\n        const lonecl = Math.atan2(yh, xh) + lon_corr;\n        const latecl = Math.atan2(zh, Math.sqrt(xh * xh + yh * yh));\n\n\n        /*** perturbations ***/\n        /*** not implemented ***/\n\n\n        xh = r * Math.cos(lonecl) * Math.cos(latecl);\n        yh = r * Math.sin(lonecl) * Math.cos(latecl);\n        zh = r * Math.sin(latecl);\n\n        let {lonsun, rsun} = this.getLonSun(d, this.computeSun(d));\n        lonsun *= Angle.RADIANS_TO_DEGREES;\n        lonsun = SunPosition.normalizeAngle360(lonsun) * Angle.DEGREES_TO_RADIANS;\n\n        const xs = rsun * Math.cos(lonsun);\n        const ys = rsun * Math.sin(lonsun);\n\n        const xg = xh + xs;\n        const yg = yh + ys;\n        const zg = zh;\n\n        const ecl = SunPosition.normalizeAngle360(23.4393 - 3.563E-7 * d) * Angle.DEGREES_TO_RADIANS;\n\n        const xe = xg;\n        const ye = yg * Math.cos(ecl) - zg * Math.sin(ecl);\n        const ze = yg * Math.sin(ecl) + zg * Math.cos(ecl);\n\n        const ra = SunPosition.normalizeAngle360(Math.atan2(ye, xe) * Angle.RADIANS_TO_DEGREES);\n        const dec = Math.atan2(ze, Math.sqrt(xe * xe + ye * ye)) * Angle.RADIANS_TO_DEGREES;\n\n        return {ra, dec};\n    },\n\n    getLonSun(d, {w, e, M}) {\n        w = SunPosition.normalizeAngle360(w) * Angle.DEGREES_TO_RADIANS;\n        //e = SunPosition.normalizeAngle360(e) * Angle.DEGREES_TO_RADIANS;\n        M = SunPosition.normalizeAngle360(M) * Angle.DEGREES_TO_RADIANS;\n\n        const E = M + e * Math.sin(M) * (1.0 + e * Math.cos(M));\n\n        const xv = Math.cos(E) - e;\n        const yv = Math.sqrt(1.0 - e * e) * Math.sin(E);\n\n        const v = Math.atan2(yv, xv);\n        const rsun = Math.sqrt(xv * xv + yv * yv);\n\n        const lonsun = v + w;\n\n        return {lonsun, rsun};\n    },\n\n};\n\nexport default Celestial;","/**\n * @exports StarFieldProgram\n */\nimport WorldWind from 'webworldwind-esa';\n\nconst {\n    ArgumentError,\n    GpuProgram,\n    Logger,\n    Matrix,\n    Color\n} = WorldWind;\n\n/**\n * Constructs a new program.\n * Initializes, compiles and links this GLSL program with the source code for its vertex and fragment shaders.\n * <p>\n * This method creates WebGL shaders for the program's shader sources and attaches them to a new GLSL program.\n * This method then compiles the shaders and then links the program if compilation is successful.\n * Use the bind method to make the program current during rendering.\n *\n * @alias StarFieldProgram\n * @constructor\n * @augments GpuProgram\n * @classdesc StarFieldProgram is a GLSL program that draws points representing stars.\n * @param {WebGLRenderingContext} gl The current WebGL context.\n * @throws {ArgumentError} If the shaders cannot be compiled, or linking of the compiled shaders into a program\n * fails.\n */\nclass StarFieldProgram extends GpuProgram {\n    constructor(gl) {\n        super(gl, 'attribute vec4 vertexPoint;\\n' +\n\n            'uniform mat4 mvpMatrix;\\n' +\n            //number of days (positive or negative) since Greenwich noon, Terrestrial Time,\n            // on 1 January 2000 (J2000.0)\n            'uniform float numDays;\\n' +\n            'uniform vec2 magnitudeRange;\\n' +\n\n            'varying float magnitudeWeight;\\n' +\n\n            //normalizes an angle between 0.0 and 359.0\n            'float normalizeAngle(float angle) {\\n' +\n            '   float angleDivisions = angle / 360.0;\\n' +\n            '   return 360.0 * (angleDivisions - floor(angleDivisions));\\n' +\n            '}\\n' +\n\n            //transforms declination and right ascension in cartesian coordinates\n            'vec3 computePosition(float dec, float ra) {\\n' +\n            '   float GMST = normalizeAngle(280.46061837 + 360.98564736629 * numDays);\\n' +\n            '   float GHA = normalizeAngle(GMST - ra);\\n' +\n            '   float lon = -GHA + 360.0 * step(180.0, GHA);\\n' +\n            '   float latRad = radians(dec);\\n' +\n            '   float lonRad = radians(lon);\\n' +\n            '   float radCosLat = cos(latRad);\\n' +\n            '   return vec3(radCosLat * sin(lonRad), sin(latRad), radCosLat * cos(lonRad));\\n' +\n            '}\\n' +\n\n            //normalizes a value between 0.0 and 1.0\n            'float normalizeScalar(float value, float minValue, float maxValue){\\n' +\n            '   return (value - minValue) / (maxValue - minValue);\\n' +\n            '}\\n' +\n\n            'void main() {\\n' +\n            '   vec3 vertexPosition = computePosition(vertexPoint.x, vertexPoint.y);\\n' +\n            '   gl_Position = mvpMatrix * vec4(vertexPosition.xyz, 1.0);\\n' +\n            '   gl_Position.z = gl_Position.w - 0.00001;\\n' +\n            '   gl_PointSize = vertexPoint.z;\\n' +\n            '   magnitudeWeight = normalizeScalar(vertexPoint.w, magnitudeRange.x, magnitudeRange.y);\\n' +\n            '}', 'precision mediump float;\\n' +\n\n            'uniform sampler2D textureSampler;\\n' +\n            'uniform int fragMode;\\n' +\n            'uniform vec4 color;\\n' +\n\n            'varying float magnitudeWeight;\\n' +\n\n            'const vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\\n' +\n            'const vec4 grey = vec4(0.5, 0.5, 0.5, 1.0);\\n' +\n\n            'void main() {\\n' +\n            '   if (fragMode == 1) {\\n' +\n            '       gl_FragColor = texture2D(textureSampler, gl_PointCoord);\\n' +\n            '   }\\n' +\n            '   else if (fragMode == 0) {\\n' +\n            //paint the starts in shades of grey, where the brightest star is white and the dimmest star is grey\n            '       gl_FragColor = mix(white, grey, magnitudeWeight);\\n' +\n            '   }\\n' +\n            '   else if (fragMode == 2) {\\n' +\n            '       gl_FragColor = color;\\n' +\n            '   }\\n' +\n            '}', [\"vertexPoint\"]);\n\n        this.FRAG_MODE_MIX_COLOR = 0;\n        this.FRAG_MODE_TEXTURE = 1;\n        this.FRAG_MODE_COLOR = 2;\n\n        /**\n         * The WebGL location for this program's 'vertexPoint' attribute.\n         * @type {Number}\n         * @readonly\n         */\n        this.vertexPointLocation = this.attributeLocation(gl, \"vertexPoint\");\n\n        /**\n         * The WebGL location for this program's 'mvpMatrix' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.mvpMatrixLocation = this.uniformLocation(gl, \"mvpMatrix\");\n\n        /**\n         * The WebGL location for this program's 'numDays' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.numDaysLocation = this.uniformLocation(gl, \"numDays\");\n\n        /**\n         * The WebGL location for this program's 'magnitudeRangeLocation' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.magnitudeRangeLocation = this.uniformLocation(gl, \"magnitudeRange\");\n\n        /**\n         * The WebGL location for this program's 'textureSampler' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.textureUnitLocation = this.uniformLocation(gl, \"textureSampler\");\n\n        /**\n         * The WebGL location for this program's 'textureEnabled' uniform.\n         * @type {WebGLUniformLocation}\n         * @readonly\n         */\n        this.fragModeLocation = this.uniformLocation(gl, \"fragMode\");\n\n        this.colorLocation = this.uniformLocation(gl, \"color\");\n\n        this.localState = {\n            mvpMatrix: null,\n            numDays: null,\n            magnitudeRange: null,\n            textureUnit: null,\n            fragMode: null,\n            color: null,\n        };\n    }\n\n    /**\n     * Loads the specified matrix as the value of this program's 'mvpMatrix' uniform variable.\n     *\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Matrix} matrix The matrix to load.\n     * @throws {ArgumentError} If the specified matrix is null or undefined.\n     */\n    loadModelviewProjection(gl, matrix) {\n        if (!matrix) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadModelviewProjection\", \"missingMatrix\"));\n        }\n\n        let forceLoad = false;\n        if (this.localState.mvpMatrix === null) {\n            forceLoad = true;\n            this.localState.mvpMatrix = Matrix.fromIdentity();\n        }\n\n        if (forceLoad || !this.localState.mvpMatrix.equals(matrix)) {\n            this.loadUniformMatrix(gl, matrix, this.mvpMatrixLocation);\n            this.localState.mvpMatrix.copy(matrix);\n        }\n    }\n\n    /**\n     * Loads the specified number as the value of this program's 'numDays' uniform variable.\n     *\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Number} numDays The number of days (positive or negative) since Greenwich noon, Terrestrial Time,\n     * on 1 January 2000 (J2000.0)\n     * @throws {ArgumentError} If the specified number is null or undefined.\n     */\n    loadNumDays(gl, numDays) {\n        if (numDays == null) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadNumDays\", \"missingNumDays\"));\n        }\n        if (this.localState.numDays !== numDays) {\n            gl.uniform1f(this.numDaysLocation, numDays);\n            this.localState.numDays = numDays;\n        }\n    }\n\n    /**\n     * Loads the specified numbers as the value of this program's 'magnitudeRange' uniform variable.\n     *\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Number} minMag\n     * @param {Number} maxMag\n     * @throws {ArgumentError} If the specified numbers are null or undefined.\n     */\n    loadMagnitudeRange(gl, minMag, maxMag) {\n        if (minMag == null) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadMagRange\", \"missingMinMag\"));\n        }\n        if (maxMag == null) {\n            throw new ArgumentError(\n                Logger.logMessage(Logger.LEVEL_SEVERE, \"StarFieldProgram\", \"loadMagRange\", \"missingMaxMag\"));\n        }\n        let forceLoad = false;\n        if (this.localState.magnitudeRange === null) {\n            forceLoad = true;\n            this.localState.magnitudeRange = [minMag, maxMag];\n        }\n\n        if (forceLoad || this.localState.magnitudeRange[0] !== minMag || this.localState.magnitudeRange[1] !== maxMag) {\n            gl.uniform2f(this.magnitudeRangeLocation, minMag, maxMag);\n            this.localState.magnitudeRange[0] = minMag;\n            this.localState.magnitudeRange[1] = maxMag;\n        }\n    }\n\n    /**\n     * Loads the specified number as the value of this program's 'textureSampler' uniform variable.\n     * @param {WebGLRenderingContext} gl The current WebGL context.\n     * @param {Number} unit The texture unit.\n     */\n    loadTextureUnit(gl, unit) {\n        if (this.localState.textureUnit !== unit) {\n            gl.uniform1i(this.textureUnitLocation, unit - gl.TEXTURE0);\n            this.localState.textureUnit = unit;\n        }\n    }\n\n    loadFragMode(gl, mode) {\n        if (this.localState.fragMode !== mode) {\n            gl.uniform1i(this.fragModeLocation, mode);\n            this.localState.fragMode = mode;\n        }\n    }\n\n    loadColor(gl, color) {\n        let forceLoad = false;\n        if (this.localState.color === null) {\n            forceLoad = true;\n            this.localState.color = new Color(0, 0, 0, 0);\n        }\n\n        if (forceLoad || !this.localState.color.equals(color)) {\n            this.loadUniformColor(gl, color, this.colorLocation);\n            this.localState.color.copy(color);\n        }\n    }\n}\n\n/**\n * A string that uniquely identifies this program.\n * @type {string}\n * @readonly\n */\nStarFieldProgram.key = \"WorldWindGpuStarFieldFullProgram\";\n\nexport default StarFieldProgram;","/**\n * @exports StarFieldLayer\n */\nimport Celestial from './Celestial';\nimport StarFieldProgram from './StarFieldProgram';\nimport SunPosition from './SunPosition';\n\nimport WorldWind from 'webworldwind-esa';\nconst {\n    Color,\n    Layer,\n    Logger,\n    Matrix,\n    REDRAW_EVENT_TYPE\n} = WorldWind;\n\n\n/**\n * Constructs a layer showing stars and the Sun around the Earth.\n * If used together with the AtmosphereLayer, the StarFieldLayer must be inserted before the AtmosphereLayer.\n *\n * If you want to use your own star data, the file provided must be .json\n * and the fields 'ra', 'dec' and 'vmag' must be present in the metadata.\n * ra and dec must be expressed in degrees.\n *\n * This layer uses J2000.0 as the ref epoch.\n *\n * If the star data .json file is too big, consider enabling gzip compression on your web server.\n * For more info about enabling gzip compression consult the configuration for your web server.\n *\n *\n -- output format : json\n SELECT \"I/239/hip_main\".HIP,  \"I/239/hip_main\".Vmag as vmag, \"I/239/hip_main\".\"_RA.icrs\" as ra,  \"I/239/hip_main\".\"_DE.icrs\" as dec\n FROM \"I/239/hip_main\"\n WHERE \"I/239/hip_main\".Vmag <=6.5\n *\n * @alias StarFieldLayer\n * @constructor\n * @classdesc Provides a layer showing stars, and the Sun around the Earth\n * @param {URL} starDataSource optional url for the stars data\n * @augments Layer\n */\nclass StarFieldLayer extends Layer {\n    constructor(starDataSource) {\n        super('StarField');\n\n        // The StarField Layer is not pickable.\n        this.pickEnabled = false;\n\n        /**\n         * The size of the Sun in pixels.\n         * This can not exceed the maximum allowed pointSize of the GPU.\n         * A warning will be given if the size is too big and the allowed max size will be used.\n         * @type {Number}\n         * @default 128\n         */\n        this.sunSize = 128;\n\n        /**\n         * Indicates weather to show or hide the Sun\n         * @type {Boolean}\n         * @default true\n         */\n        this.showSun = true;\n\n        //Documented in defineProperties below.\n        this._starDataSource = starDataSource || WorldWind.configuration.baseUrl + 'images/stars.json';\n        this._sunImageSource = WorldWind.configuration.baseUrl + 'images/sunTexture.png';\n\n        //Internal use only.\n        //The MVP matrix of this layer.\n        this._matrix = Matrix.fromIdentity();\n\n        //Internal use only.\n        //gpu cache key for the stars vbo.\n        this._starsPositionsVboCacheKey = null;\n\n        //Internal use only.\n        this._numStars = 0;\n\n        //Internal use only.\n        this._starData = null;\n\n        //Internal use only.\n        this._minMagnitude = Number.MAX_VALUE;\n        this._maxMagnitude = Number.MIN_VALUE;\n\n        //Internal use only.\n        //A flag to indicate the star data is currently being retrieved.\n        this._loadStarted = false;\n\n        //Internal use only.\n        this._minScale = 30e6;\n        this._scale = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n        //this._scale = 50e6;\n\n        //Internal use only.\n        this._sunPositionsCacheKey = '';\n        this._sunBufferView = new Float32Array(4);\n\n        //Internal use only.\n        this._MAX_GL_POINT_SIZE = 0;\n\n        this.showPlanets = true;\n\n        const jupiterSize = 32;\n\n        this.planets = [\n            {\n                id: Celestial.MERCURY,\n                url: 'images/Mercury64.png',\n                size: jupiterSize / 4,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.VENUS,\n                url: 'images/Venus64.png',\n                size: jupiterSize / 4,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.MARS,\n                url: 'images/Mars64.png',\n                size: jupiterSize / 4,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.JUPITER,\n                url: 'images/Jupiter64.png',\n                size: jupiterSize,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.SATURN,\n                url: 'images/Saturn64.png',\n                size: jupiterSize,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.URANUS,\n                url: 'images/Uranus64.png',\n                size: jupiterSize / 2,\n                ra: null,\n                dec: null,\n            },\n            {\n                id: Celestial.NEPTUNE,\n                url: 'images/Neptune64.png',\n                size: jupiterSize / 2,\n                ra: null,\n                dec: null,\n            },\n        ];\n\n        this._planetsBufferView = null;\n\n        this._cacheKeys = {\n            sunPosition: '',\n            planetPositions: '',\n            starPositions: ''\n        };\n    }\n\n    /**\n     * Url for the stars data.\n     * @memberof StarFieldLayer.prototype\n     * @type {URL}\n     */\n    get starDataSource() {\n        return this._starDataSource;\n    }\n    \n    set starDataSource(value) {\n        this._starDataSource = value;\n        this.invalidateStarData();\n    }\n\n    /**\n     * Url for the sun texture image.\n     * @memberof StarFieldLayer.prototype\n     * @type {URL}\n     */\n    get sunImageSource() {\n        return this._sunImageSource;\n    }\n    \n    set sunImageSource(value) {\n        this._sunImageSource = value;\n    }\n\n    // Documented in superclass.\n    doRender(dc) {\n        if (dc.globe.is2D()) {\n            return;\n        }\n\n        if (!this.haveResources(dc)) {\n            this.loadResources(dc);\n            return;\n        }\n\n        this.beginRendering(dc);\n        try {\n            this.doDraw(dc);\n        }\n        finally {\n            this.endRendering(dc);\n        }\n    }\n\n    // Internal. Intentionally not documented.\n    haveResources(dc) {\n        let sunTexture = dc.gpuResourceCache.resourceForKey(this._sunImageSource);\n        let planetTextures = this.planets.every(planet => {\n            const texture = dc.gpuResourceCache.resourceForKey(planet.url);\n            return !!texture;\n        });\n        return (\n            this._starData != null &&\n            sunTexture != null &&\n            planetTextures\n        );\n    }\n\n    // Internal. Intentionally not documented.\n    loadResources(dc) {\n        let gl = dc.currentGlContext;\n        let gpuResourceCache = dc.gpuResourceCache;\n\n        if (!this._starData) {\n            this.fetchStarData();\n        }\n\n        let sunTexture = gpuResourceCache.resourceForKey(this._sunImageSource);\n        if (!sunTexture) {\n            gpuResourceCache.retrieveTexture(gl, this._sunImageSource);\n        }\n\n        this.planets.forEach(planet => {\n            const texture = gpuResourceCache.resourceForKey(planet.url);\n            if (!texture) {\n                gpuResourceCache.retrieveTexture(gl, planet.url);\n            }\n        });\n    }\n\n    // Internal. Intentionally not documented.\n    beginRendering(dc) {\n        let gl = dc.currentGlContext;\n        dc.findAndBindProgram(StarFieldProgram);\n        gl.enableVertexAttribArray(0);\n        gl.depthMask(false);\n    }\n\n    // Internal. Intentionally not documented.\n    doDraw(dc) {\n        this.loadCommonUniforms(dc);\n\n        this.renderStars(dc);\n\n        if (this.showSun) {\n            this.renderSun(dc);\n        }\n\n        if (this.showPlanets) {\n            this.renderPlanets(dc);\n        }\n    }\n\n    // Internal. Intentionally not documented.\n    loadCommonUniforms(dc) {\n        let gl = dc.currentGlContext;\n        let program = dc.currentProgram;\n\n        let mvp = dc.modelviewProjection || dc.navigatorState.modelviewProjection;\n        this._matrix.copy(mvp);\n        this._matrix.multiplyByScale(this._scale, this._scale, this._scale);\n\n        program.loadModelviewProjection(gl, this._matrix);\n\n        //this subtraction does not work properly on the GPU, it must be done on the CPU\n        //possibly due to precision loss\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        let julianDate = SunPosition.computeJulianDate(this.time || new Date());\n        program.loadNumDays(gl, julianDate - 2451545.0);\n    }\n\n    // Internal. Intentionally not documented.\n    renderStars(dc) {\n        let gl = dc.currentGlContext;\n        let gpuResourceCache = dc.gpuResourceCache;\n        let program = dc.currentProgram;\n\n        if (!this._starsPositionsVboCacheKey) {\n            this._starsPositionsVboCacheKey = gpuResourceCache.generateCacheKey();\n        }\n        let vboId = gpuResourceCache.resourceForKey(this._starsPositionsVboCacheKey);\n        if (!vboId) {\n            vboId = gl.createBuffer();\n            let positions = this.createStarsGeometry();\n            gpuResourceCache.putResource(this._starsPositionsVboCacheKey, vboId, positions.length * 4);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n        }\n        else {\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n        }\n        dc.frameStatistics.incrementVboLoadCount(1);\n\n        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n        program.loadMagnitudeRange(gl, this._minMagnitude, this._maxMagnitude);\n        program.loadFragMode(gl, program.FRAG_MODE_MIX_COLOR);\n\n        gl.drawArrays(gl.POINTS, 0, this._numStars);\n    }\n\n    // Internal. Intentionally not documented.\n    renderPlanets(dc) {\n        let gl = dc.currentGlContext;\n        let program = dc.currentProgram;\n        let gpuResourceCache = dc.gpuResourceCache;\n\n        if (!this._MAX_GL_POINT_SIZE) {\n            this._MAX_GL_POINT_SIZE = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE)[1];\n        }\n        if (this.sunSize > this._MAX_GL_POINT_SIZE) {\n            Logger.log(Logger.LEVEL_WARNING, 'StarFieldLayer - sunSize is to big, max size allowed is: ' +\n                this._MAX_GL_POINT_SIZE);\n        }\n\n        this.planets.forEach(planet => {\n            const {ra, dec} = Celestial.getCelestialLocation(planet.id, this.time || new Date());\n            planet.ra = ra;\n            planet.dec = dec;\n        }, this);\n\n        if (!this._planetsBufferView) {\n            this._planetsBufferView = new Float32Array(this.planets.length * 4);\n        }\n\n        for (let i = 0; i < this.planets.length; i++) {\n            let planet = this.planets[i];\n            this._planetsBufferView[i * 4 + 0] = planet.dec;\n            this._planetsBufferView[i * 4 + 1] = planet.ra;\n            this._planetsBufferView[i * 4 + 2] = Math.min(planet.size, this._MAX_GL_POINT_SIZE);\n            this._planetsBufferView[i * 4 + 3] = 1;\n        }\n\n        if (!this._planetsPositionsVboCacheKey) {\n            this._planetsPositionsVboCacheKey = gpuResourceCache.generateCacheKey();\n        }\n        let vboId = gpuResourceCache.resourceForKey(this._planetsPositionsVboCacheKey);\n        if (!vboId) {\n            vboId = gl.createBuffer();\n            gpuResourceCache.putResource(this._planetsPositionsVboCacheKey, vboId, this._planetsBufferView.length * 4);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferData(gl.ARRAY_BUFFER, this._planetsBufferView, gl.DYNAMIC_DRAW);\n        }\n        else {\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._planetsBufferView);\n        }\n        dc.frameStatistics.incrementVboLoadCount(1);\n        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n        program.loadFragMode(gl, program.FRAG_MODE_TEXTURE);\n\n        for (let i = 0; i < this.planets.length; i++) {\n            let textureSrc = this.planets[i].url;\n            let texture = dc.gpuResourceCache.resourceForKey(textureSrc);\n            texture.bind(dc);\n            gl.drawArrays(gl.POINTS, i, 1);\n        }\n    }\n\n    // Internal. Intentionally not documented.\n    renderSun(dc) {\n        let gl = dc.currentGlContext;\n        let program = dc.currentProgram;\n        let gpuResourceCache = dc.gpuResourceCache;\n\n        if (!this._MAX_GL_POINT_SIZE) {\n            this._MAX_GL_POINT_SIZE = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE)[1];\n        }\n        if (this.sunSize > this._MAX_GL_POINT_SIZE) {\n            Logger.log(Logger.LEVEL_WARNING, 'StarFieldLayer - sunSize is to big, max size allowed is: ' +\n                this._MAX_GL_POINT_SIZE);\n        }\n\n        let sunCelestialLocation = SunPosition.getAsCelestialLocation(this.time || new Date());\n\n        this._sunBufferView[0] = sunCelestialLocation.declination;\n        this._sunBufferView[1] = sunCelestialLocation.rightAscension;\n        this._sunBufferView[2] = Math.min(this.sunSize, this._MAX_GL_POINT_SIZE);\n        this._sunBufferView[3] = 1;\n\n        if (!this._sunPositionsCacheKey) {\n            this._sunPositionsCacheKey = gpuResourceCache.generateCacheKey();\n        }\n        let vboId = gpuResourceCache.resourceForKey(this._sunPositionsCacheKey);\n        if (!vboId) {\n            vboId = gl.createBuffer();\n            gpuResourceCache.putResource(this._sunPositionsCacheKey, vboId, this._sunBufferView.length * 4);\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferData(gl.ARRAY_BUFFER, this._sunBufferView, gl.DYNAMIC_DRAW);\n        }\n        else {\n            gl.bindBuffer(gl.ARRAY_BUFFER, vboId);\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._sunBufferView);\n        }\n        dc.frameStatistics.incrementVboLoadCount(1);\n        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n        program.loadFragMode(gl, program.FRAG_MODE_TEXTURE);\n\n        let sunTexture = dc.gpuResourceCache.resourceForKey(this._sunImageSource);\n        sunTexture.bind(dc);\n\n        gl.drawArrays(gl.POINTS, 0, 1);\n    }\n\n    // Internal. Intentionally not documented.\n    endRendering(dc) {\n        let gl = dc.currentGlContext;\n        gl.depthMask(true);\n        gl.disableVertexAttribArray(0);\n    }\n\n    // Internal. Intentionally not documented.\n    fetchStarData() {\n        if (this._loadStarted) {\n            return;\n        }\n\n        this._loadStarted = true;\n        let self = this;\n        let xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                try {\n                    self._starData = JSON.parse(this.response);\n                    self.sendRedrawRequest();\n                }\n                catch (e) {\n                    Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer unable to parse JSON for star data ' +\n                        e.toString());\n                }\n            }\n            else {\n                Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer unable to fetch star data. Status: ' +\n                    this.status + ' ' + this.statusText);\n            }\n            self._loadStarted = false;\n        };\n\n        xhr.onerror = function () {\n            Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer unable to fetch star data');\n            self._loadStarted = false;\n        };\n\n        xhr.ontimeout = function () {\n            Logger.log(Logger.LEVEL_SEVERE, 'StarFieldLayer fetch star data has timeout');\n            self._loadStarted = false;\n        };\n\n        xhr.open('GET', this._starDataSource, true);\n        xhr.send();\n    }\n\n    // Internal. Intentionally not documented.\n    createStarsGeometry() {\n        let indexes = this.parseStarsMetadata(this._starData.metadata);\n\n        if (indexes.raIndex === -1) {\n            throw new Error(\n                Logger.logMessage(Logger.LEVEL_SEVERE, 'StarFieldLayer', 'createStarsGeometry',\n                    'Missing ra field in star data.'));\n        }\n        if (indexes.decIndex === -1) {\n            throw new Error(\n                Logger.logMessage(Logger.LEVEL_SEVERE, 'StarFieldLayer', 'createStarsGeometry',\n                    'Missing dec field in star data.'));\n        }\n        if (indexes.magIndex === -1) {\n            throw new Error(\n                Logger.logMessage(Logger.LEVEL_SEVERE, 'StarFieldLayer', 'createStarsGeometry',\n                    'Missing vmag field in star data.'));\n        }\n\n        let data = this._starData.data;\n        let positions = [];\n\n        this._minMagnitude = Number.MAX_VALUE;\n        this._maxMagnitude = Number.MIN_VALUE;\n\n        for (let i = 0, len = data.length; i < len; i++) {\n            let starInfo = data[i];\n            let declination = starInfo[indexes.decIndex]; //for latitude\n            let rightAscension = starInfo[indexes.raIndex]; //for longitude\n            let magnitude = starInfo[indexes.magIndex];\n            let pointSize = magnitude < 2 ? 2 : 1;\n            positions.push(declination, rightAscension, pointSize, magnitude);\n\n            this._minMagnitude = Math.min(this._minMagnitude, magnitude);\n            this._maxMagnitude = Math.max(this._maxMagnitude, magnitude);\n        }\n        this._numStars = Math.floor(positions.length / 4);\n\n        return positions;\n    }\n\n    // Internal. Intentionally not documented.\n    parseStarsMetadata(metadata) {\n        let raIndex = -1,\n            decIndex = -1,\n            magIndex = -1;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            let starMetaInfo = metadata[i];\n            if (starMetaInfo.name === 'ra') {\n                raIndex = i;\n            }\n            if (starMetaInfo.name === 'dec') {\n                decIndex = i;\n            }\n            if (starMetaInfo.name === 'vmag') {\n                magIndex = i;\n            }\n        }\n        return {\n            raIndex: raIndex,\n            decIndex: decIndex,\n            magIndex: magIndex\n        };\n    }\n\n    // Internal. Intentionally not documented.\n    invalidateStarData() {\n        this._starData = null;\n        this._starsPositionsVboCacheKey = null;\n    }\n\n    // Internal. Intentionally not documented.\n    sendRedrawRequest() {\n        let e = document.createEvent('Event');\n        e.initEvent(REDRAW_EVENT_TYPE, true, true);\n        window.dispatchEvent(e);\n    }\n}\n\nexport default StarFieldLayer;\n","import WorldWind from 'webworldwind-esa';\n\nconst PickedObject = WorldWind.PickedObject,\n    SurfacePolygon = WorldWind.SurfacePolygon,\n    SurfaceShape = WorldWind.SurfaceShape;\n\n/**\n * If no image is set, it behaves the same as a SurfaceShape.\n * To set an image pass it to the shape .image property (myShape.image = myImg;)\n *\n * Limitations with an image:\n * The boundaries have to define a quadrilateral (can be defined by 4 corners)\n * If the edges arc over the globe, the interior will not be filled properly\n * Shapes that cross the anti-meridian will not use the image\n * Performance is lower\n *\n * When used with an image it will divide the image in cells (based on the step, maxImageWidth, maxImageHeight values)\n * and draw each image cell to the canvas\n * This is a slow operation, try to keep the number of cells \"low\"\n * For example:\n * step = 1, maxImageWidth = 64, maxImageHeight = 64\n * will produce 4096 (64 * 64 * 1) cells\n */\nclass TexturedSurfaceShape extends SurfaceShape {\n    constructor(attributes) {\n        super(attributes);\n\n        /**\n         * Image to draw on the surface of the shape.\n         * @type {Image}\n         */\n        this.image = null;\n\n        /**\n         * Determines the division step of the image\n         * Lower numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.step = 1;\n\n        /**\n         * Resizes the image\n         * Higher numbers produce better textures at the expense of performance\n         * @type {Number}\n         */\n        this.maxImageWidth = 64;\n        this.maxImageHeight = 64;\n    }\n\n    get image() {\n        return this._image;\n    }\n\n    set image(img) {\n        this._image = img;\n        this.stateKeyInvalid = true;\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    renderToTexture(dc, ctx2D, xScale, yScale, dx, dy) {\n        let attributes = (this.highlighted ? (this.highlightAttributes || this._attributes) : this._attributes);\n        let drawInterior = (!this._isInteriorInhibited && attributes.drawInterior);\n        let drawOutline = (attributes.drawOutline && attributes.outlineWidth > 0);\n        let pickColor;\n\n        if (!drawInterior && !drawOutline) {\n            return;\n        }\n\n        if (dc.pickingMode && !this.pickColor) {\n            this.pickColor = dc.uniquePickColor();\n        }\n\n        if (dc.pickingMode) {\n            pickColor = this.pickColor.toHexString();\n        }\n\n        if (this.crossesAntiMeridian || this.containsPole) {\n            if (drawInterior) {\n                this.draw(this._interiorGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                ctx2D.fill();\n            }\n            if (drawOutline) {\n                this.draw(this._outlineGeometry, ctx2D, xScale, yScale, dx, dy);\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        } else {\n            if (this.image && !dc.pickingMode) {\n                ctx2D.save();\n            }\n            let points = this._interiorGeometry[0].map(location => ({\n                x: location.longitude * xScale + dx,\n                y: location.latitude * yScale + dy\n            }));\n            this.drawPoints(points, ctx2D);\n            if (drawInterior) {\n                if (this.image && !dc.pickingMode) {\n                    ctx2D.clip();\n                    this.drawImageToPolygon(ctx2D, this.image, points);\n                    ctx2D.restore();\n                }\n                else {\n                    ctx2D.fillStyle = dc.pickingMode ? pickColor : attributes.interiorColor.toCssColorString();\n                    ctx2D.fill();\n                }\n            }\n            if (drawOutline) {\n                ctx2D.lineWidth = attributes.outlineWidth;\n                ctx2D.strokeStyle = dc.pickingMode ? pickColor : attributes.outlineColor.toCssColorString();\n                ctx2D.stroke();\n            }\n        }\n\n        if (dc.pickingMode) {\n            let po = new PickedObject(this.pickColor.clone(), this.pickDelegate ? this.pickDelegate : this,\n                null, this.layer, false);\n            dc.resolvePick(po);\n        }\n    }\n\n    drawPoints(points, ctx2D) {\n        ctx2D.beginPath();\n        ctx2D.moveTo(points[0].x, points[0].y);\n        for (let i = 1, len = points.length; i < len; i++) {\n            ctx2D.lineTo(points[i].x, points[i].y);\n        }\n    }\n\n    drawImageToPolygon(ctx, image, points) {\n        let canvasWidth = ctx.canvas.width;\n        let canvasHeight = ctx.canvas.height;\n\n        let offScreenCanvas = TexturedSurfaceShape.offScreenCanvas();\n        let offScreenCtx = TexturedSurfaceShape.offScreenCtx();\n\n        let corners = this.getCorners(points);\n        let axesDim = this.getAxesDimensions(corners);\n\n        let offScreenWidth = Math.min(axesDim.distX, this.maxImageWidth);\n        let offScreenHeight = Math.min(axesDim.distY, this.maxImageHeight);\n\n        offScreenCanvas.width = offScreenWidth;\n        offScreenCanvas.height = offScreenHeight;\n        offScreenCtx.drawImage(image, 0, 0, offScreenWidth, offScreenHeight);\n\n        let step = this.step;\n        let width = offScreenWidth - 1;\n        let height = offScreenHeight - 1;\n        let topLeft, topRight, bottomRight, bottomLeft, y1Current, y2Current, y1Next, y2Next;\n\n        for (let y = 0; y < height; y += step) {\n            y1Current = this.lerp(corners[0], corners[3], y / height);\n            y2Current = this.lerp(corners[1], corners[2], y / height);\n            y1Next = this.lerp(corners[0], corners[3], (y + step) / height);\n            y2Next = this.lerp(corners[1], corners[2], (y + step) / height);\n\n            for (let x = 0; x < width; x += step) {\n                topLeft = this.lerp(y1Current, y2Current, x / width);\n                topRight = this.lerp(y1Current, y2Current, (x + step) / width);\n                bottomRight = this.lerp(y1Next, y2Next, (x + step) / width);\n                bottomLeft = this.lerp(y1Next, y2Next, x / width);\n\n                let dWidth = Math.ceil(Math.max(step, Math.abs(topRight.x - topLeft.x), Math.abs(bottomLeft.x - bottomRight.x))) + 1;\n                let dHeight = Math.ceil(Math.max(step, Math.abs(topLeft.y - bottomLeft.y), Math.abs(topRight.y - bottomRight.y))) + 1;\n\n                if (this.isRectInsideCanvas(topLeft, dWidth, dHeight, canvasWidth, canvasHeight)) {\n                    ctx.drawImage(offScreenCanvas, x, y, step, step, topLeft.x, topLeft.y, dWidth, dHeight);\n                }\n            }\n        }\n    }\n\n    getCorners(points, bbox) {\n        bbox = bbox || this.getBbox(points);\n\n        let edgePoints = points.filter(point => this.isEdgePoint(point, bbox));\n\n        if (edgePoints.length === 5 &&\n            this.arePointsEqual(edgePoints[0], edgePoints[edgePoints.length - 1])) {\n            edgePoints.length = 4;\n        }\n\n        if (edgePoints.length > 4) {\n            let leftPoints = edgePoints.filter(point => point.x === bbox.minX);\n            let rightPoints = edgePoints.filter(point => point.x === bbox.maxX);\n\n            let {top: topLeft, bottom: bottomLeft} = this.getTopBottom(leftPoints);\n            let {top: topRight, bottom: bottomRight} = this.getTopBottom(rightPoints);\n\n            return [topLeft, topRight, bottomRight, bottomLeft];\n        }\n\n        let slope1 = this.getSlope(edgePoints[0], edgePoints[2]);\n        let slope2 = this.getSlope(edgePoints[1], edgePoints[3]);\n        let topLeftPoint = this.getTopLeftPoint(slope1, edgePoints[0], edgePoints[2]) ||\n            this.getTopLeftPoint(slope2, edgePoints[1], edgePoints[3]);\n\n        if (!topLeftPoint) {\n            console.log('Could not determine top left corner with the slope method');\n            return edgePoints;\n        }\n\n        let topLeftIndex = edgePoints.findIndex(point => point.x === topLeftPoint.x && point.y === topLeftPoint.y);\n        let newCorners = [];\n        for (let i = topLeftIndex; i < edgePoints.length + topLeftIndex; i++) {\n            newCorners.push(edgePoints[i % edgePoints.length]);\n        }\n\n        return newCorners;\n    }\n\n    getBbox(points) {\n        let bbox = {\n            minX: Number.MAX_SAFE_INTEGER,\n            maxX: Number.MIN_SAFE_INTEGER,\n            minY: Number.MAX_SAFE_INTEGER,\n            maxY: Number.MIN_SAFE_INTEGER,\n        };\n\n        return points.reduce((bbox, point) => {\n            bbox.minX = Math.min(bbox.minX, point.x);\n            bbox.maxX = Math.max(bbox.maxX, point.x);\n            bbox.minY = Math.min(bbox.minY, point.y);\n            bbox.maxY = Math.max(bbox.maxY, point.y);\n\n            return bbox;\n        }, bbox);\n    }\n\n    getTopBottom(points) {\n        return points.reduce((acc, point) => {\n            if (point.y < acc.top.y) {\n                acc.top = point;\n            }\n\n            if (point.y > acc.bottom.y) {\n                acc.bottom = point;\n            }\n\n            return acc;\n        }, {top: points[0], bottom: points[0]});\n    }\n\n    distance(p1, p2) {\n        let dx = p1.x - p2.x;\n        let dy = p1.y - p2.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    isEdgePoint(point, bbox) {\n        return (\n            point.x === bbox.minX || point.x === bbox.maxX ||\n            point.y === bbox.minY || point.y === bbox.maxY\n        );\n    }\n\n    arePointsEqual(p1, p2) {\n        return p1.x === p2.x && p1.y === p2.y;\n    }\n\n    getSlope(p1, p2) {\n        return (p1.y - p2.y) / (p1.x - p2.x);\n    }\n\n    getTopLeftPoint(slope, point1, point2) {\n        if (slope <= 0) {\n            return null;\n        }\n\n        if (point1.y < point2.y) {\n            return point1;\n        }\n\n        return point2;\n    }\n\n    getAxesDimensions(corners) {\n        let dx = Math.abs(corners[0].x - corners[1].x);\n        let dy = Math.abs(corners[0].y - corners[1].y);\n\n        let distX = 0;\n        let distY = 0;\n\n        if (dx > dy) {\n            distX = this.distance(corners[0], corners[1]);\n            distY = this.distance(corners[0], corners[3]);\n        }\n        else {\n            distX = this.distance(corners[0], corners[3]);\n            distY = this.distance(corners[0], corners[1]);\n        }\n\n        return {distX, distY};\n    }\n\n    lerp(p1, p2, t) {\n        return {\n            x: p1.x + (p2.x - p1.x) * t,\n            y: p1.y + (p2.y - p1.y) * t\n        };\n    }\n\n    isRectInsideCanvas(point, width, height, canvasWidth, canvasHeight) {\n        return (\n            point.x + width >= 0 &&\n            point.x <= canvasWidth &&\n            point.y + height >= 0 &&\n            point.y < canvasHeight\n        );\n    }\n\n    static offScreenCanvas() {\n        if (!TexturedSurfaceShape.canvas) {\n            TexturedSurfaceShape.canvas = document.createElement('canvas');\n        }\n        return TexturedSurfaceShape.canvas;\n    }\n\n    static offScreenCtx() {\n        if (!TexturedSurfaceShape.ctx) {\n            let canvas = TexturedSurfaceShape.offScreenCanvas();\n            TexturedSurfaceShape.ctx = canvas.getContext('2d');\n        }\n        return TexturedSurfaceShape.ctx;\n    }\n}\n\nexport default TexturedSurfaceShape;","import WorldWind from 'webworldwind-esa';\nimport TexturedSurfaceShape from './TexturedSurfaceShape';\n\nconst SurfacePolygon = WorldWind.SurfacePolygon;\n\n/**\n * @exports TexturedSurfacePolygon\n */\nclass TexturedSurfacePolygon extends TexturedSurfaceShape {\n    /**\n     * Constructs Textured Surface Polygon. The polygon is drawn using the standard attributes. Unlike the standard\n     * surface polygon it draws associated image on the area of the polygon.\n     * @param boundaries {Location[]} Array of locations enclosing the surface polygon.\n     * @param attributes {ShapeAttributes} Attributes used for the styling of the Surface Polygon\n     */\n    constructor(boundaries, attributes) {\n        super(attributes);\n\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - constructor - The specified boundary is not an array.');\n        }\n\n        /**\n         * Boundaries relevant for the current polygon.\n         * @type {Location[]}\n         * @memberof TexturedSurfacePolygon.prototype\n         * @public\n         */\n        this.boundaries = boundaries;\n\n        this._stateId = SurfacePolygon.stateId++;\n    }\n\n    get boundaries() {\n        return this._boundaries;\n    }\n\n    set boundaries(boundaries) {\n        if (!Array.isArray(boundaries)) {\n            throw new Error('TexturedSurfacePolygon - set boundaries - The specified boundary is not an array.');\n        }\n\n        this.resetBoundaries();\n        this._boundaries = boundaries;\n        this._stateId = SurfacePolygon.stateId++;\n        this.stateKeyInvalid = true;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeStateKey() {\n        return TexturedSurfacePolygon.staticStateKey(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    computeBoundaries(dc) {\n    }\n\n    static staticStateKey(shape) {\n        return SurfacePolygon.staticStateKey(shape) + \" pg \" + shape._stateId;\n    }\n}\n\nexport default TexturedSurfacePolygon;","import React, { useState, useEffect, useRef } from \"react\";\nimport WorldWind from \"webworldwind-esa\";\nimport StarFieldLayer from \"./wwwx/layer/starfield/StarFieldLayer\"\nimport TexturedSurfacePolygon from './wwwx/shapes/TexturedSurfacePolygon'\n\n\n// BasicWorldWindowController.prototype.applyLimits = function () {\n//     var navigator = this.wwd.navigator;\n\n//     // Clamp latitude to between -90 and +90, and normalize longitude to between -180 and +180.\n//     navigator.lookAtLocation.latitude = WWMath.clamp(navigator.lookAtLocation.latitude, -90, 90);\n//     navigator.lookAtLocation.longitude = Angle.normalizedDegreesLongitude(navigator.lookAtLocation.longitude);\n\n//     // Clamp range to values greater than 1 in order to prevent degenerating to a first-person navigator when\n//     // range is zero.\n//     navigator.range = WWMath.clamp(navigator.range, 1, Number.MAX_VALUE);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.heading = Angle.normalizedDegrees(navigator.heading);\n\n//     // Clamp tilt to between 0 and +90 to prevent the viewer from going upside down.\n//     navigator.tilt = WWMath.clamp(navigator.tilt, 0, 90);\n\n//     // Normalize heading to between -180 and +180.\n//     navigator.roll = Angle.normalizedDegrees(navigator.roll);\n\n//     // Apply 2D limits when the globe is 2D.\n//     if (this.wwd.globe.is2D() && navigator.enable2DLimits) {\n//         // Clamp range to prevent more than 360 degrees of visible longitude. Assumes a 45 degree horizontal\n//         // field of view.\n//         var maxRange = 2  Math.PI  this.wwd.globe.equatorialRadius;\n//         navigator.range = WWMath.clamp(navigator.range, 1, maxRange);\n\n//         // Force tilt to 0 when in 2D mode to keep the viewer looking straight down.\n//         navigator.tilt = 0;\n//     }\n// };\n\nexport function useEww({ id, clon, clat, alt, starfield, atmosphere, names }) {\n    //console.log('useEww renders')\n    \n  \n    const eww = useRef(null)\n    const [projection, setProjection] = useState(\"3D\")\n    // const [aoi, setAoi] = useState({type: null, value: null})\n    const [aoi, setAoi] = useState('')\n    const [geojsonlayers, setGeojsonlayers] = useState([])\n    const [quicklooklayers, setQuicklooklayers] = useState([])\n    const [ewwstate, setEwwState] = useState({latitude: clat, longitude: clon, altitude: alt, aoi:'', pickedItems: []})\n\n\n    // Turn the globe up north\n    function northUp() {\n        const wwd = eww.current\n        let headingIncrement = 1.0;\n        if (Math.abs(wwd.navigator.heading) > 60) {\n            headingIncrement = 2.0;\n        } else if (Math.abs(navigator.heading) > 120) {\n            headingIncrement = 3.0;\n        }\n        if (wwd.navigator.heading > 0) {\n            headingIncrement = -headingIncrement;\n        }\n\n        let runOperation = () => {\n            if (Math.abs(wwd.navigator.heading) > Math.abs(headingIncrement)) {\n                wwd.navigator.heading += headingIncrement;\n                setTimeout(runOperation, 10);\n            } else {\n                wwd.navigator.heading = 0;\n            }\n            wwd.redraw();\n        };\n        setTimeout(runOperation, 10);\n    }\n\n\n\n    //toggle atmosphere\n    function toggleAtmosphere() {\n        console.log('toggleAtmosphere')\n        eww.current.layers[3].enabled = !eww.current.layers[3].enabled\n        eww.current.redraw();\n    }\n\n    //toggle starField\n    function toggleStarfield() {\n        console.log('toggleStarfield')\n        eww.current.layers[2].enabled = !eww.current.layers[2].enabled\n        eww.current.redraw();\n    }\n\n    //toggle name overlay\n    function toggleNames() {\n        console.log('toggleNames')\n        eww.current.layers[1].enabled = !eww.current.layers[1].enabled\n        eww.current.redraw();\n    }\n\n    function  getViewPolygon () {\n        let view = eww.current.viewport\n        let area = {}\n        let polygon = ''\n        // console.log('view: ' + view.x + '/' + view.y + '/' + view.width + '/' + view.height);\n\n        let bl ;\n        try { \n            bl =  eww.current.pickTerrain(eww.current.canvasCoordinates(view.x, view.y + view.height)).terrainObject().position\n            bl.latitude = Math.round(bl.latitude * 10000)/10000\n            bl.longitude = Math.round(bl.longitude * 10000)/10000\n        }\n        catch(err) {bl = null;}\n\n\n        let tr ;\n        try { \n            tr = eww.current.pickTerrain(eww.current.canvasCoordinates(view.x + view.width, view.y)).terrainObject().position\n            tr.latitude = Math.round(tr.latitude * 10000)/10000\n            tr.longitude = Math.round(tr.longitude * 10000)/10000\n        }\n        catch(err) {tr = null;}\n\n        //console.log(bl.longitude+'/'+bl.latitude+'/'+tr.longitude+'/'+tr.latitude);\n        if(bl == null || tr == null )  {\n            //   area = {type:\"bbox\", value:\"-180,-90,180,90\"};\n              polygon = ''\n        } else {\n              area = {\n                    type: \"bbox\",\n                    value:\n                           bl.longitude +','\n                          + bl.latitude +','\n                          +tr.longitude +','\n                          +tr.latitude\n              };\n\n              polygon = 'POLYGON((' \n                + bl.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + bl.latitude + ',' \n                + tr.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + tr.latitude + ',' \n                + bl.longitude + ' ' + bl.latitude + '))' \n        }\n        return polygon\n\n    }\n    \n    const addGeojson = (url,epoch) => {\n\n        // console.log('replace: '+replace)\n\n        function shapeConfigurationCallback(geometry, properties) {\n            let configuration = {};\n            configuration.userProperties = properties\n    \n            let placemarkAttributes = new WorldWind.PlacemarkAttributes(null);\n            placemarkAttributes.imageScale = 10;\n            placemarkAttributes.imageColor = new WorldWind.Color(0, 1, 1, 0.2);\n            placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(\n                WorldWind.OFFSET_FRACTION, 5,\n                WorldWind.OFFSET_FRACTION, 5);\n            //placemarkAttributes.imageSource = whiteDot;\n    \n    \n            if (geometry.isPointType() || geometry.isMultiPointType()) {\n                configuration.attributes = new WorldWind.PlacemarkAttributes(placemarkAttributes);\n                \n            } else if (geometry.isLineStringType() || geometry.isMultiLineStringType()) {\n                configuration.attributes.drawOutline = true;\n                configuration.attributes.outlineColor = new WorldWind.Color(\n                    0.1 * configuration.attributes.interiorColor.red,\n                    0.3 * configuration.attributes.interiorColor.green,\n                    0.7 * configuration.attributes.interiorColor.blue,\n                    1\n                );\n                configuration.attributes.outlineWidth = 1;\n            } else if (geometry.isPolygonType() || geometry.isMultiPolygonType()) {\n                configuration.attributes = new WorldWind.ShapeAttributes(null);\n                configuration.attributes.interiorColor = new WorldWind.Color(1, 0, 0, 0.2);\n                configuration.attributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.3);\n\n                configuration.highlightAttributes = new WorldWind.ShapeAttributes(configuration.attributes);\n                configuration.highlightAttributes.outlineColor = new WorldWind.Color(1, 0, 0, 0.4);\n                configuration.highlightAttributes.interiorColor = new WorldWind.Color(1, 0, 0, 0);\n                // configuration.attributes.outlineWidth = 0.3;\n\n                // configuration.attributes.applyLighting = true;\n                // configuration.attributes.imageSource = properties.quicklookUrl\n\n            }\n    \n            //console.log(configuration.attributes);\n            return configuration;\n        }\n\n        \n        function loadCompleteCallback() {\n            console.log(renderableLayer)\n            setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n            enableRenderables(epoch) // uncomment to disable renderables\n            eww.current.redraw();\n        }\n    \n        // if (replace) removeGeojson()\n        let renderableLayer = new WorldWind.RenderableLayer('Products: '+url.properties.updated+Math.ceil(Math.random() * 10000))\n        \n        eww.current.addLayer(renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])\n        // setGeojsonlayers(eww.current.layers)\n        let geoJson = new WorldWind.GeoJSONParser(url);\n        geoJson.load(loadCompleteCallback, shapeConfigurationCallback, renderableLayer);\n        // setGeojsonlayers((geojsonlayers)=>[...geojsonlayers,renderableLayer])        \n    }\n\n    function removeGeojson() {\n        for(let i=0;i<geojsonlayers.length;i++) {\n          eww.current.removeLayer(geojsonlayers[i])\n        //   console.log('removing json layers: ')\n        //   console.log(geojsonlayers[i])\n        }\n        setGeojsonlayers((geojsonlayers)=>[])\n        // console.log(geojsonlayers)\n        eww.current.redraw();\n      }\n\n    function addWMS() {\n    }\n\n    function addQuicklookWMS(renderable) {\n\n        console.log(renderable.computeSectors(eww.current.drawContext))\n        console.log(WorldWind.Sector.FULL_SPHERE)\n\n        // for S2:  \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S2L1C_TRUE_COLOR&styles=&format=image/png&transparent=true&version=1.1.1&width=1500&height=1000&srs=EPSG:4326&bbox=12.357903,41.800495,12.625694,41.984760\n\n        \n        // https://view.onda-dias.eu/instance00/ows?&service=WMS&request=GetMap&layers=S1B_IW_GRDH_1SDV_20190520T050758_20190520T050823_016323_01EB81_6EB6&styles=&format=image%2Fpng&transparent=true&version=1.1.1&width=256&height=256&srs=EPSG%3A3857&bbox=2035059.441064533,7044436.526761846,2191602.4749925737,7200979.560689885\n        let wmsConfigQL = {\n            service: \"https://view.onda-dias.eu/instance00/ows\",\n            // layerNames: renderable.userProperties.title,\n            // layerNames: 'S2L1C_TRUE_COLOR',\n            layerNames: 'S1_IW_GRDH_FullResolution',\n            \n            // title: renderable.userProperties.title,\n            title: 'quicklook',\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: renderable.computeSectors(eww.current.drawContext)[0],\n            // sector: renderable.sector,\n            // sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n\n        // let wmsConfigQL = {\n        //     service: \"https://tiles.maps.eox.at/wms\",\n        //     layerNames: \"overlay_bright\",\n        //     title: \"overlay_bright\",\n        //     numLevels: 19,\n        //     format: \"image/png\",\n        //     size: 256,\n        //     sector: WorldWind.Sector.FULL_SPHERE,\n        //     levelZeroDelta: new WorldWind.Location(90, 90)\n        // }\n        // eww.current.removeLayer(getLayerByName('quicklook') )\n        let qllayer =  new WorldWind.WmsLayer(wmsConfigQL, renderable.userProperties.date)\n        eww.current.addLayer(qllayer)\n        eww.current.redraw()\n        console.log(eww.current.layers)\n    }\n\n    function getLayerByName(name) {\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            // console.log('display name: '+eww.current.layers[i].displayName)\n            if (eww.current.layers[i].displayName === name) return eww.current.layers[i]\n        }\n        return null\n    }\n\n    async function enableRenderables(time) {\n        let timeOffset = 1000 * 60 * 60 * 3 // 3 hours\n        for (let i = 0; i < eww.current.layers.length; i++) {\n            if (eww.current.layers[i].displayName.includes('Products:')) {\n                \n                for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                    let renderable = eww.current.layers[i].renderables[j]\n                    if (time != 0) {\n                        let renderableStartDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStartTime)).getTime()\n                        let renderableStopDate = (new Date(renderable.userProperties.earthObservation.acquisitionInformation[0].acquisitionParameter.acquisitionStopTime)).getTime()\n                        renderable.enabled = (renderableStartDate <= time+timeOffset/2 && renderableStopDate >= time-timeOffset/2) ? true : false   \n                    } else {\n                        renderable.enabled = false\n                    }         \n                }\n            }\n            if (eww.current.layers[i].displayName === 'quicklook') {\n                // eww.current.layers[i].enabled = \n            }\n        }\n\n    }\n\n    function addQuicklook(renderable) {\n\n        function imageLoader(url, useCredentials) {\n            return new Promise((resolve, reject) => {\n                const img = new Image();\n        \n                img.onload = function() {\n                    resolve(img);\n                };\n        \n                img.onerror = function(e){\n                    reject(e);\n                };\n        \n                img.crossOrigin = useCredentials ? 'Use-Credentials' : 'Anonymous';\n                img.src = url;\n                console.log(' adding QL')\n            });\n        }\n\n\n        // console.log(' adding QL')\n        //  console.log(renderable.attributes)\n        // let quicklook =  new TexturedSurfacePolygon(renderable.sector)\n        // let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n        // // quicklookLayer.addRenderable(quicklook)\n        // // setQuicklooklayers((quicklooklayers)=>[...quicklooklayers,quicklookLayer])\n        // // eww.current.addLayer(quicklookLayer)\n        // let ql = new Image()\n        // ql.src = renderable.userProperties.quicklookUrl\n        // quicklook.image = ql\n        \n        imageLoader(renderable.userProperties.quicklookUrl,true).then(image => {\n            let quicklookLayer = getLayerByName('Quicklooks')\n            removeQuicklooks()\n            let footprint = [\n                renderable.boundaries[0][0],\n                renderable.boundaries[0][3],\n                renderable.boundaries[0][2],\n                renderable.boundaries[0][1]\n            ]\n            // footprint[0].pop()\n            console.log(footprint)\n            let quicklook =  new TexturedSurfacePolygon(footprint,renderable.attributes)\n            quicklook.maxImageWidth = 64\n            quicklook.maxImageHeight = 64\n            \n            quicklook.image = image\n            quicklookLayer.addRenderable(quicklook)\n            eww.current.addLayer(quicklookLayer)\n            eww.current.redraw()\n        })\n    }\n\n    function removeQuicklooks() {\n        getLayerByName('Quicklooks').removeAllRenderables()\n        eww.current.redraw()\n    }\n\n    function setTime(epoch) {\n        getLayerByName('StarField').time = getLayerByName('Atmosphere').time = new Date(epoch)\n        enableRenderables(epoch)\n        // console.log('display name: ')\n        // console.log(getLayerByName('StarField').displayName)\n        eww.current.redraw();\n        \n\n     }\n\n\n    function toggleProjection() {\n        setProjection( prevProj => {\n          console.log(\"prevProjection: \"+prevProj)\n          let supportedProjections = [ \"3D\", \"Equirectangular\", \"Mercator\"];\n          let newProj = (supportedProjections.indexOf(prevProj) + 1)%supportedProjections.length\n          console.log(\"newProjection: \"+supportedProjections[newProj])\n          switch (supportedProjections[newProj]) {\n            case \"3D\":\n                eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n                break;\n            case \"Equirectangular\":\n                eww.current.globe.projection = new WorldWind.ProjectionEquirectangular();\n                break;\n            case \"Mercator\":\n                eww.current.globe.projection = new WorldWind.ProjectionMercator();\n                break;\n            case \"North Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"North\");\n                break;\n            case \"South Polar\":\n                eww.current.globe.projection = new WorldWind.ProjectionPolarEquidistant(\"South\");\n                break;\n            default:\n            eww.current.globe.projection = new WorldWind.ProjectionWgs84();\n            }\n          eww.current.redraw();\n          return supportedProjections[newProj]\n          })      \n      }\n\n    // callback from eww   \n    const setGlobeStates = () => {\n        \n        let lo = eww.current.navigator.lookAtLocation.longitude\n        let la = eww.current.navigator.lookAtLocation.latitude\n        let al = eww.current.navigator.range\n        let vp = (al < 2000000?getViewPolygon():'')\n\n        setEwwState((ewwstate) => { return {...ewwstate, longitude:lo, latitude: la, altitude: al, viewpolygon: vp}}) \n\n    }\n\n    // handler for tap/click\n\n    const handleClick  = (recognizer) => {\n        // console.log('click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        // Perform the pick. Must first convert from window coordinates to canvas coordinates, which are\n        // relative to the upper left corner of the canvas rather than the upper left corner of the page.\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n        console.log(pickList)\n        if (pickList.terrainObject()) {\n            // position = pickList.terrainObject().position;\n            // store list of selected footprints in a string for later comparison\n            eww.current.removeLayer(getLayerByName('quicklook') )\n            // de-highlight all rendereables\n            for (let i = 0; i < eww.current.layers.length; i++) {\n                if (eww.current.layers[i].displayName.includes('Products:')) {                    \n                    for (let j = 0; j < eww.current.layers[i].renderables.length; j++) {\n                        let renderable = eww.current.layers[i].renderables[j]\n                        renderable.highlighted = false\n                    }\n                }\n            }\n    \n            // ... and now highlight all picked rendereables\n            let pickedItems = []\n            for (let i = 0; i < pickList.objects.length; i++) {\n                if (pickList.objects[i].userObject instanceof WorldWind.SurfaceShape) {\n                    pickedItems.push(pickList.objects[i].userObject) \n                    pickList.objects[i].userObject.highlighted = !pickList.objects[i].userObject.highlighted\n                    \n                    addQuicklookWMS(pickList.objects[i].userObject)\n                }\n            }\n            console.log(pickedItems)\n            setEwwState((ewwstate) => { return {...ewwstate, pickedItems: pickedItems}})\n            eww.current.redraw()\n        } else {\n            console.log('No position !');\n            return;\n        }\n\n\n    }\n\n    const handleDoubleClick  = (recognizer) => {\n        console.log('double click')\n        let x = recognizer.clientX\n        let y = recognizer.clientY\n        let pickList = eww.current.pick(eww.current.canvasCoordinates(x, y));\n\n        let position;\n  \n  \n        // Get coordinates of clicked point and list of selected footprints. Do nothing if click done outside the globe.\n        if (pickList.terrainObject()) {\n            position = pickList.terrainObject().position;\n            // eww.current.goTo(new WorldWind.Location(position.latitude, position.longitude));\n\n            let point = \"POINT(\"+position.longitude+' '+position.latitude+\")\"\n            \n            setEwwState((ewwstate) => { return {...ewwstate, aoi: point}}) \n    \n        } else {\n              console.log('No position !');\n              setEwwState((ewwstate) => { return {...ewwstate, aoi: ''}})\n        }\n  \n        \n\n       \n    }\n\n    // useEffect(() => {\n    //     console.log(\"useEffect aoi: \" + aoi)\n    //     let newewwstate = {...ewwstate, aoi: aoi}\n    //     setEwwState(newewwstate)\n    // }, [aoi]); \n\n    // didMount effect\n    useEffect(() => {\n        console.log(\"useEffect (mount) in Eww  star/atmo: \"+ starfield+'/'+atmosphere)\n        // eww.current = new WorldWind.WorldWindow(id, elevationModel);\n        eww.current = new WorldWind.WorldWindow(id);\n        eww.current.redrawCallbacks.push(setGlobeStates)\n\n        // Define a min/max altitude limit\n        WorldWind.BasicWorldWindowController.prototype.applyLimits = function () {\n            eww.current.navigator.range = WorldWind.WWMath.clamp(eww.current.navigator.range, 2000, 300000000);\n        }\n\n        // define click/tap recognisers\n        // let tapRecognizer = new WorldWind.TapRecognizer(eww.current, handleClick);\n        // tapRecognizer.numberOfTaps = 1;\n        // let doubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        // doubleTapRecognizer.numberOfTaps = 2;\n        // doubleTapRecognizer.recognizeSimultaneouslyWith(tapRecognizer);\n\n        let clickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleClick);\n        clickRecognizer.numberOfClicks = 1;\n        let doubleClickRecognizer = new WorldWind.ClickRecognizer(eww.current, handleDoubleClick);\n        doubleClickRecognizer.numberOfClicks = 2;\n        doubleClickRecognizer.recognizeSimultaneouslyWith(clickRecognizer);\n        doubleClickRecognizer.maxClickInterval = 200;\n\n        let tapRecognizer = new WorldWind.TapRecognizer(eww.current, handleClick);\n        tapRecognizer.numberOfTaps = 1;\n        let doubleTapRecognizer = new WorldWind.TapRecognizer(eww.current, handleDoubleClick);\n        doubleTapRecognizer.numberOfTaps = 2;\n        doubleTapRecognizer.recognizeSimultaneouslyWith(tapRecognizer);\n        doubleTapRecognizer.maxTapInterval = 200;\n\n\n\n        //setWwd(eww);\n        let wmsConfigBg = {\n            service: \"https://tiles.esa.maps.eox.at/wms\",\n            layerNames: \"s2cloudless-2018\",\n            title: \"s2cloudless-2018\",\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n    \n        let wmsConfigNames = {\n            service: \"https://tiles.maps.eox.at/wms\",\n            layerNames: \"overlay_bright\",\n            title: \"overlay_bright\",\n            numLevels: 19,\n            format: \"image/png\",\n            size: 256,\n            sector: WorldWind.Sector.FULL_SPHERE,\n            levelZeroDelta: new WorldWind.Location(90, 90)\n        }\n\n        console.log(WorldWind.configuration.baseUrl)\n        WorldWind.configuration.baseUrl = WorldWind.configuration.baseUrl.slice(0,-3)\n        console.log(WorldWind.configuration.baseUrl)\n\n        //let starFieldLayer = new WorldWindX.StarFieldLayer();\n        // let starFieldLayer = new WorldWind.StarFieldLayer();\n        let starFieldLayer = new StarFieldLayer();\n        let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_01deg.jpg');\n        // let atmosphereLayer = new WorldWind.AtmosphereLayer('images/BlackMarble_2016_3km.jpg');\n        \n        //atmosphereLayer.minActiveAltitude = 5000000\n\n        let quicklookLayer = new WorldWind.RenderableLayer('Quicklooks')\n    \n        let layers = [\n            { layer: new WorldWind.WmsLayer(wmsConfigBg, \"\"), enabled: true },\n            { layer: new WorldWind.WmsLayer(wmsConfigNames, \"\"), enabled: names },\n            { layer: starFieldLayer, enabled: starfield },\n            { layer: atmosphereLayer, enabled: atmosphere },\n            { layer: quicklookLayer, enabled: true }\n        ];\n    \n        for (let l = 0; l < layers.length; l++) {\n            layers[l].layer.enabled = layers[l].enabled;\n            eww.current.addLayer(layers[l].layer);\n        }\n        //let date = new Date();\n        starFieldLayer.time = new Date();\n        atmosphereLayer.time = new Date();\n        setTimeout(() => {\n            eww.current.goToAnimator.travelTime = 1000;\n            eww.current.goTo(new WorldWind.Position(clat, clon, alt));\n            eww.current.redraw();\n            }, 2000)\n    \n        eww.current.redraw();\n        eww.current.deepPicking = true;\n        // eww.current.orderedRenderingFilters.push(declutterByTime)\n    }, []); // effect runs only once\n        \n  \n  return { ewwstate, removeGeojson, addGeojson, addWMS, toggleStarfield, toggleAtmosphere, setTime, toggleProjection, toggleNames, northUp };\n}\n","import React, {useState, useEffect, useLayoutEffect, useRef} from 'react'\nimport './Earth.css'\nimport { useEww } from \"./useEww\"\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\n\n\n\n\nfunction Earth({ viewdate, id, clat, clon, alt, starfield, atmosphere, names }) {\n\n    const {\n        ewwstate,\n        addGeojson,\n        removeGeojson,\n        addWMS,\n        toggleProjection,\n        toggleAtmosphere,\n        toggleStarfield,\n        toggleNames,\n        setTime,\n        northUp\n    } = useEww({\n        id: id,\n        clat: clat,\n        clon: clon,\n        alt: alt,\n        starfield: starfield,\n        atmosphere: atmosphere,\n        names: names\n    })\n\n    useHotkeys(\"p\",toggleProjection)  \n    useHotkeys(\"a\",toggleAtmosphere)  \n    useHotkeys(\"s\",toggleStarfield)  \n    useHotkeys(\"n\",toggleNames)  \n    useHotkeys(\"c\",removeGeojson)\n    useHotkeys(\"u\",northUp)\n\n    useEffect(() => {\n        setTime(viewdate.getTime())\n    },[viewdate])\n\n\n\n    let globeStyle = {\n        background: 'inherit',\n        position: \"fixed\",\n        left: 0,\n        width: '100%',\n        height: '100%'\n    };\n        \n    return (\n            <canvas id={id} style={globeStyle} />\n    );\n}\n\nexport default Earth\n","import React from 'react';\nimport dateFormat from \"dateformat\"\nimport './DateLabel.css';\n\nfunction DateLabel({date, highlight, animated}) {\n\n\n    return (\n        <div className='LabelContainer' >\n            <div className='Date'>\n                <div className={highlight==='day' || highlight==='none'?'DayLabel':'DayLabel Greyedout'}  key='day'  >{dateFormat(date,'UTC:dd')}</div>\n                <div className='YearMonth'>\n                    <div className={highlight==='month' || highlight==='none'?'MonthLabel ':'MonthLabel  Greyedout'}  key='month' >{dateFormat(date,'UTC:mmm').toUpperCase()}</div>\n                    <div className={highlight==='year' || highlight==='none'?'YearLabel ':'YearLabel Greyedout'}  key='year' >{date.getUTCFullYear()}</div>\n                </div>\n            </div>\n            <div className={animated?'Line  Line-active':'Line'} key='line' ></div>\n            <div className={highlight==='time' || highlight==='none'?'TimeLabel ':'TimeLabel Greyedout'} key='time' >{dateFormat(date,'UTC:HH:MM:ss')}</div>\n        </div>\n    )\n}\nexport default DateLabel\n","import React, {useEffect, useState} from 'react';\nimport { useClock } from \"./useClock\"\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n\nimport './DateController.css';\n\nfunction DateController({startdate, onDateChange}) {\n\n    const {\n        date,\n        // playing,\n        togglePause,\n        reset,\n        increaseSpeed,\n        decreaseSpeed,\n        // forceDate\n    } = useClock({\n        autoStart: false,\n        duration: 600000,\n        initdate: startdate\n    })\n\n\n\n    useHotkeys(\"t\",togglePause)\n    useHotkeys(\"r\",()=>{reset() })\n    useHotkeys(\".\",increaseSpeed)\n    useHotkeys(\",\",decreaseSpeed)\n\n    \n\n\n    useEffect(() => {\n        // console.log(\"date from useClock: \"+new Date(date).toJSON())\n        onDateChange(date)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[date]);\n\n    useEffect(() => {\n        // console.log(\"date from datemanager: \"+new Date(date).toJSON())\n        // forceDate(startdate)\n        //forceDate(date)\n        //setAppdate({appdate: new Date(date)})\n    },[startdate]);\n\n    const [lastTap, setLasttap] = useState()\n    const handleDoubleTap = () => {\n        const now = Date.now();\n        if (lastTap && (now - lastTap) < 300) {\n          reset();\n        } else {\n            setLasttap(now)\n            togglePause()\n        }\n      }\n\n\n    return (\n        <div className='DateController' onClick={handleDoubleTap}/>\n    )\n}\nexport default DateController\n","import { useState, useEffect, useRef } from \"react\";\n\n\nexport function useClock({ autoStart, duration, initdate }) {\n    //console.log('useClock renders')\n    //const { autoStart, duration } = settings || {};\n  \n    // let initDate = startdate\n    const [date, setDate] = useState(initdate)\n    const [playing, setPlaying] = useState(false)\n    // const [stepstate, setStepstate] = useState(1000*60*60)\n    // const [refreshrate, setrefreshrate] = useState(200)\n    \n    const step = useRef() \n    const refreshrate = useRef() \n    // step.current = 1000*60*60\n    refreshrate.current = 50\n    \n    const ldate = useRef()\n\n      // Control functions\n    const intervalRef = useRef()\n    const timeoutRef = useRef()\n    \n\n    // function increaseSpeed() {\n    //     setStep ( () => {\n    //         let newstate = (step > 0)? step * 2:step / 2\n    //         if(Math.abs(newstate) < refreshrate) newstate = refreshrate\n    //         return newstate\n    //     })\n    // }\n    // function decreaseSpeed() {\n    //     setStep (() => {\n    //         let newstate = (step > 0)? step / 2:step * 2\n    //         if(Math.abs(newstate) < refreshrate) newstate = refreshrate\n    //         return newstate\n    //     })\n    // }\n    function increaseSpeed() {\n        // stop()\n        step.current = (step.current > 0)? step.current *= 2:step.current /= 2\n        if(Math.abs(step.current) < refreshrate.current) step.current = refreshrate.current\n        console.log('step: '+step.current)\n        // setStepstate((st)=>st*2)\n        // start()\n    }\n    function decreaseSpeed() {\n        step.current = (step.current > 0)? step.current /= 2:step.current *= 2\n        if(Math.abs(step.current) < refreshrate.current) step.current = -1 * refreshrate.current\n        // setStepstate((st)=>st/2)\n    }\n\n    function togglePause() {\n        if (playing) {\n            stop()\n        } else {\n            start()\n        }\n    }\n    \n    function start() {\n        console.log('start clock')\n        if(!step.current) step.current = 1000*60*60\n        intervalRef.current = setInterval( ()=>{\n            ldate.current += step.current\n            setDate(new Date(ldate.current))\n        },refreshrate.current)\n        \n        setPlaying(true)\n    }\n    \n    function stop() {\n        console.log('stop clock')\n        if(timeoutRef.current) clearTimeout(timeoutRef.current)\n        if (intervalRef.current) clearInterval(intervalRef.current)\n        setPlaying(false)\n    }\n    \n\n    function reset() {\n        stop()\n        ldate.current = new Date().getTime()\n        setDate(new Date(ldate.current))\n\n    }\n\n     \n    function forceDate(newdate) {\n        console.log('forcedate useclock: '+newdate.toJSON())\n        if(playing) {\n            stop()\n            ldate.current = newdate.getTime()\n            start()    \n        } else {\n            ldate.current = newdate.getTime()\n        }\n    }\n\n    useEffect(() => {\n        console.log('init start useclock '+initdate.toJSON())\n        // if ( !playing )  ldate.current = initdate.getTime()\n        if ( playing ) {\n                stop()\n            ldate.current = initdate.getTime()\n            start()\n        } else {\n            ldate.current = initdate.getTime()\n        }  \n    }, [initdate])\n\n\n\n    // didMount effect\n    useEffect(() => {\n        console.log('render useclock')\n        // setDate((new Date()).getTime())\n        ldate.current = new Date().getTime()\n        if (autoStart) {\n            start();\n        }\n        //return reset;\n    }, []);\n\n  \n  return { date, playing, togglePause, reset, increaseSpeed, decreaseSpeed, forceDate };\n}\n","import React, {useState, useEffect,useLayoutEffect, useRef} from 'react';\nimport {useSpring, animated} from 'react-spring'\nimport './DateSelector.css';\n\nfunction DateSelectorScale({date, zoomfactor, immediate}) {\n\n    const scale = useRef()\n    const [start, setStart] = useState(date)    \n    const [active, setActive] = useState(false)    \n    const [timescale, setTimescale] = useState('')    \n    // const [zoom, setZoom] = useState(zoomfactor)    \n\n\n    useEffect(() => {  \n        return () => {}          \n    })\n        \n    const scaleText = (_start, _zoom) => {\n        // console.log('_start: '+_start.toJSON()+'  zoom: '+_zoom)\n        if(!scale.current) return\n            \n        const monthcode = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']\n        const isEven = num => ((num % 2) == 0) ? true : false;\n\n\n        let day, month, hour, year = 0\n        let lastday =0\n        let lastmonth = 0\n        let lastyear = 0\n        let lasthour = 0\n        let tics = []    \n        let putyear = (_zoom < 1000*60*60*24*30*10)\n        let putmonth = (_zoom < 1000*60*60*24*5)\n        let putday = (_zoom < 1000*60*60*2)\n        let putevenhour = (_zoom < 1000*60*20)\n        let puthour = (_zoom < 1000*60*8)\n        // console.log('  zoom: '+((_zoom*10)/(1000*60*60*24) ) +'  puthour: '+puthour+'  putday: '+putday+'  putmonth: '+putmonth+'  putevenhour: '+putevenhour)\n        let lastpos = 0\n        for ( let i=0 ; i < scale.current.offsetHeight ; i+=1 ) {\n            let refdate = new Date( (i- scale.current.offsetHeight/2) * _zoom + _start.getTime()  )\n            day = refdate.getUTCDate()\n            month = monthcode[refdate.getUTCMonth()]\n            hour = refdate.getUTCHours()\n            year = refdate.getUTCFullYear()\n\n            if (putevenhour) {\n                if(hour != lasthour) {\n                    if (hour != 0 &&  (isEven(hour) || puthour)) {\n                        tics.push({class:'HourTic', pos: i, label: hour})\n                    } else  {\n                        if (hour == 0) {\n                            tics.push({class:'DayTic', pos: i, label: day})\n                            tics.push({class:'MonthTic', pos: i, label: month})\n                            tics.push({class:'YearTic', pos: i, label: year})            \n                        }\n                    }\n                }\n    \n            } else if (putday) {\n                if(day !== lastday) {\n                    if (day != 1) {\n                        tics.push({class:'DayTic', pos: i, label: day})\n                    } else {\n                        tics.push({class:'DayTic', pos: i, label: day})\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                        tics.push({class:'YearTic', pos: i, label: year})\n                     }\n                    \n                }\n    \n            } else if (putmonth) {\n                if(month !== lastmonth && lastday!=0 && putmonth) {\n                    if (month !== 'JAN') {\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                    } else {\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                        tics.push({class:'YearTic', pos: i, label: year})\n                    }\n                }\n    \n            } else if (putyear) {\n                if(year !== lastyear && lastmonth !== 0 ) {\n                    if (month !== 'JAN') {\n                        tics.push({class:'MonthTic', pos: i, label: month})\n                    } else {\n                        // tics.push({class:'MonthTic', pos: i, label: month})\n                        tics.push({class:'YearTic', pos: i, label: year})\n                    }\n                }\n    \n            }\n\n            lastday = day\n            lastyear = year\n            lastmonth = month\n            lasthour = hour\n        }\n        \n        return tics.map(item => (            <div className={item.class} key={item.class+item.pos} style={{top:item.pos}}>{item.label}</div>))\n    }\n\n    // useLayoutEffect(() => {\n    //     setTimescale(scaleText(date,zoomfactor))\n    // },[date,zoomfactor])\n\n\n    const [{ dater, zoomer }, set] = useSpring(() => ({ dater: date.getTime(), zoomer: zoomfactor}))\n    useLayoutEffect(() => {\n        // console.log('zoomfactor: '+zoomfactor+'  to: '+date.toJSON())\n        \n        set({ \n            to: {\n                zoomer: zoomfactor, \n                dater: date.getTime()\n            },\n            config: {  duration: 400},\n            immediate: false,\n            onFrame: ()=>{\n                // console.log(zoomer.value+'/ '+(new Date(dater.value)).toJSON())\n                // setTimescale(scaleText(new Date(dater.value),zoomer.value))\n                setTimescale(scaleText(new Date(dater.value),zoomer.value))\n            }\n        })\n\n    },[ zoomfactor])\n\n    useLayoutEffect(() => {\n        // console.log('zoomfactor: '+zoomfactor+'  to: '+date.toJSON())\n        \n        set({ \n            to: {\n                zoomer: zoomfactor, \n                dater: date.getTime()\n            },\n            config: {  duration: 400},\n            immediate: immediate,\n            onFrame: ()=>{\n                // console.log(zoomer.value+'/ '+(new Date(dater.value)).toJSON())\n                // setTimescale(scaleText(new Date(dater.value),zoomer.value))\n                setTimescale(scaleText(new Date(dater.value),zoomer.value))\n            }\n        })\n\n    },[date])\n\n\n    return (\n        <animated.div ref={scale} className='DateSelectorScale' >\n            {timescale}\n        </animated.div>\n    )\n}\nexport default DateSelectorScale\n","import React, {useState, useEffect, useLayoutEffect, useRef} from 'react'\nimport {useSpring, animated, config} from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport { add, sub, scale } from 'vec-la'\nimport DateSelectorScale from './DateSelectorScale'\nimport useDebounce from '../../utils/useDebounce'\n\nimport './DateSelector.css';\n// import { start } from 'repl';\n\nfunction DateSelector({startdate, onDateChange, onFinalDateChange}) {\n    const STEPS_UP = [ 1000*60*60 ,  1000*60*60*24, 1000*60*60*24*15]\n    const STEPS_DOWN = [ 1000*60*60 , 1000*60*10, 1000*60*1.8, 1000*27, 1000*60*60*24]\n    \n\n    const selector = useRef()\n    const offset = useRef()\n    if(!offset.current) offset.current = [0, 0 ]\n    \n    const [scaledate, setScaledate ] = useState(startdate)\n    // const debouncedScaledate = useDebounce(scaledate, 10);\n\n    const [lastStartdate, setlLastStartdate ] = useState(startdate)\n    \n    const [newstart, setNewstart ] = useState(startdate)\n    const [active, setActive ] = useState(false)\n\n    // zoomfactor: how long is a pixel in ms\n    const [zoomfactor, setZoomfactor ] = useState(STEPS_UP[0])\n\n    const [{ xy }, set] = useSpring(() => ({ xy: [0,0] }))\n\n    const bind = useGesture({\n\n        onDrag: ({  event, first, down, delta, velocity, direction, temp = {\n            xy: xy.getValue(),\n            laststeparea: 0,\n            deltaoffset: [0,0]\n            }\n        }) => {\n            let Xoffset = selector.current.parentElement.offsetWidth - (event.pageX?event.pageX:selector.current.parentElement.offsetWidth)\n            let Yoffset = (event.pageY?event.pageY:selector.current.parentElement.offsetHeight) - selector.current.offsetHeight/2\n\n            let steparea\n            let zoom\n\n            if(Yoffset > 0) {\n                steparea = Math.min(STEPS_UP.length-1,Math.floor((Xoffset-selector.current.offsetWidth)/60+1))\n                steparea = (steparea > STEPS_UP.length-1)?STEPS_UP.length:steparea\n                steparea = (steparea < 0)?0:steparea\n                zoom = STEPS_UP[steparea]\n            } else {\n                steparea = Math.min(STEPS_DOWN.length-1,Math.floor((Xoffset-selector.current.offsetWidth)/60+1))\n                steparea = (steparea > STEPS_DOWN.length-1)?STEPS_DOWN.length:steparea\n                steparea = (steparea < 0)?0:steparea\n                zoom = STEPS_DOWN[steparea]\n            }\n\n            // console.log(steparea)\n            let step = 1\n            // console.log(offset.current)\n            // if (Xoffset > selector.current.offsetWidth) steparea = 1\n            // if (Xoffset > selector.current.offsetWidth + 100) steparea = 2\n            \n            // for ( let i = 0 ; i < STEPS.length ; i++ ) {\n\n            // }\n            \n            if (steparea !== temp.laststeparea) {\n                console.log(' step changed: '+temp.laststeparea+' to '+steparea)\n                \n                setZoomfactor(zoom)\n                setNewstart(scaledate)\n                temp.laststeparea = steparea\n                temp.xy = [0,0]\n                temp.deltaoffset = delta\n                \n            } \n\n            if (first) setActive(true)\n\n            velocity = (Math.abs(velocity)<.2)?0:velocity  \n            // console.log('velocity '+velocity) \n            \n            set({ \n                // xy: add(scale(sub(delta,temp.deltaoffset),step), temp.xy), \n                xy: add(scale(add(sub(delta,temp.deltaoffset),offset.current),step), temp.xy), \n                immediate: down, \n                config: { velocity: scale(direction, velocity*step), decay: true},\n                // config: { mass: 10, tension: 20 , friction: 40, precision: 1 },\n                // onFrame: ()=>{console.log('xy: '+xy.getValue())},\n                // config: config.gentle,\n                // config: {},\n                onFrame: ()=>{\n                    let newdate = new Date(newstart.getTime() - xy.getValue()[1] * zoomfactor)\n                    // onDateChange(newdate)\n                    setScaledate(newdate)\n                    setlLastStartdate(newdate)\n                },\n                // onFrame: ()=>{onDateChange( olddate => new Date(olddate.getTime() + xy.getValue()[1] * 1000))},\n                // onFrame: setLiveDate(),\n                onRest: ()=>{\n                    if (!down) {\n                        // setTimeout(()=>setActive(false),1)\n                        setActive(false)\n                        let newdate = new Date(newstart.getTime() - xy.getValue()[1] * zoomfactor)\n                        onFinalDateChange(newdate)\n                        offset.current = [0,0]\n\n                    }\n                }\n            })\n            return temp\n        }\n    })\n\n\n    useEffect(() => {\n        // if(!active) onFinalDateChange(scaledate)  \n        \n        if(!active) {\n            offset.current[1] -= (startdate.getTime() - lastStartdate.getTime())  / zoomfactor\n            // console.log(offset.current[1]+ ' /  '+ (startdate.getTime() - lastStartdate.getTime()))\n            setScaledate(startdate)\n            setlLastStartdate(startdate)\n            // onDateChange(startdate)\n        }\n    },[startdate])\n\n    useEffect(() => {\n        onDateChange(scaledate)\n    },[scaledate])\n\n\n\n    return (\n        <animated.div {...bind()} className='DateSelector' ref={selector} >\n            <div className=\"Mask\"  >\n\n                <DateSelectorScale className='scale' date={scaledate} zoomfactor={zoomfactor} immediate={active}></DateSelectorScale>\n                \n                <div className=\"TriangleContainer\" >\n                    <svg height=\"40\" width=\"20\" className=\"Triangle\">\n                        <polygon points=\"20,5 20,35 12,20\" />   \n                    </svg> \n                </div>        \n            </div>\n\n        </animated.div>\n                                  )\n}\nexport default DateSelector\n","import React, {useState, useEffect, useRef} from 'react';\nimport DateLabel from './components/datelabel'\nimport DateController from './components/datecontroller'\nimport DateSelector from './components/dateselector'\n\n\nfunction DateManager({startdate, onDateChange, onFinalDateChange, searching}) {\n\n    const [selectorStartdate, setselectorStartdate] = useState(startdate)\n    const [controllerStartdate, setcontrollerStartdate] = useState(startdate)\n    const [labeldate, setLabelDate] = useState(startdate)\n\n    const handleSelectorDateChange = (date) => {\n        // console.log('handleSelectorDateChange:' + date.toJSON())\n        setLabelDate(date)\n        onDateChange(date)\n        // setscontrollerStartdate(date)\n    }\n\n    const handleSelectorFinalDateChange = (date) => {\n        // console.log('handleSelectorFinalDateChange:' + date.toJSON())\n        setcontrollerStartdate(date)\n        // onFinalDateChange(date)\n    }\n    \n    const handleControllerDateChange = (date) => {\n        // console.log('handleControllerDateChange' + date.toJSON())\n        setselectorStartdate(date)\n    }\n\n    useEffect(() => {\n        // console.log('startdate in date manager: '+startdate.toJSON())\n        setselectorStartdate(startdate)\n    },[startdate])\n\n\n\n    return (\n        <div >\n          <DateController startdate={controllerStartdate} onDateChange={handleControllerDateChange}/>\n          <DateLabel date={labeldate} highlight='none' animated={searching}/>\n          <DateSelector startdate={selectorStartdate} onDateChange={handleSelectorDateChange} onFinalDateChange={handleSelectorFinalDateChange}/>\n        </div>\n    ) \n}\nexport default DateManager","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css'\nimport Earth from '../earth'\nimport DateManager from '../datemanager'\nimport { useHotkeys } from 'react-hotkeys-hook'\n\n// import useToggle from 'react-use/lib/useToggle'\nimport Fullscreen from \"react-full-screen\"\nimport { useFullscreen } from '@straw-hat/react-fullscreen'\n\n\nfunction App() {\n    \n    let initdate = new Date()\n    const [viewdate, setViewdate] = useState(initdate)\n    const [startdate, ] = useState(initdate)\n    const [searching, ] = useState(false)\n\n    const changeDate = (newdate) => {\n        // console.log('App changeDate callback: ' + newdate.toJSON())\n        setViewdate(newdate)\n    }\n\n    useEffect(() => {\n        // console.log('Initial viewdate: '+viewdate.toJSON())\n    },[])\n      \n    useEffect(() => {\n        // console.log('startdate changed to: '+startdate.toJSON())\n    },[startdate])\n    \n    const [isFull,setIsfull] = useState(false)\n    const { isFullscreen, toggleFullscreen } = useFullscreen(window.document.body);\n    useHotkeys(\"f\",toggleFullscreen) \n\n\n    return (\n        <div className=\"App\" >\n            <Fullscreen enabled={isFull} onChange={() =>  {if(!isFullscreen) setIsfull(false)} }>\n                <div className=\"Earth\">\n                    <Earth viewdate={viewdate} id=\"globe\" starfield=\"true\" atmosphere='true' clon='0.5' clat='40' names='true'/>\n                </div>\n                <DateManager startdate={startdate}  searching={searching} onDateChange={changeDate} />\n            </Fullscreen>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}